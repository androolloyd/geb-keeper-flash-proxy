"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GebProxyIncentivesActions = void 0;
var geb_contract_base_1 = require("@reflexer-finance/geb-contract-base");
var bignumber_1 = require("@ethersproject/bignumber");
var GebProxyIncentivesActions = /** @class */ (function (_super) {
    __extends(GebProxyIncentivesActions, _super);
    function GebProxyIncentivesActions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GebProxyIncentivesActions.prototype.coinJoin_join = function (apt, safeHandler, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "apt", "type": "address" }, { "internalType": "address", "name": "safeHandler", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "coinJoin_join", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [apt, safeHandler, wad]);
    };
    GebProxyIncentivesActions.prototype.ethJoin_join__AddressAddress = function (ethValue, apt, safe) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "apt", "type": "address" }, { "internalType": "address", "name": "safe", "type": "address" }], "name": "ethJoin_join", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [apt, safe], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.ethJoin_join__AddressAddressUint256 = function (ethValue, apt, safe, value) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "apt", "type": "address" }, { "internalType": "address", "name": "safe", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "ethJoin_join", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [apt, safe, value], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.exitAndRemoveLiquidity = function (coinJoin, incentives, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "exitAndRemoveLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            coinJoin,
            incentives,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.exitMine = function (incentives) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }], "name": "exitMine", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives]);
    };
    GebProxyIncentivesActions.prototype.exitRemoveLiquidityRepayDebt = function (manager, coinJoin, safe, incentives, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "exitRemoveLiquidityRepayDebt", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            coinJoin,
            safe,
            incentives,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.exitRemoveLiquidityRepayDebtFreeETH = function (manager, ethJoin, coinJoin, safe, incentives, ethToFree, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "ethToFree", "type": "uint256" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "exitRemoveLiquidityRepayDebtFreeETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            ethJoin,
            coinJoin,
            safe,
            incentives,
            ethToFree,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.freeETH = function (manager, ethJoin, safe, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "freeETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [manager, ethJoin, safe, wad]);
    };
    GebProxyIncentivesActions.prototype.generateDebtAndProvideLiquidityStake = function (ethValue, manager, taxCollector, coinJoin, uniswapRouter, incentives, safe, wad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "generateDebtAndProvideLiquidityStake", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            coinJoin,
            uniswapRouter,
            incentives,
            safe,
            wad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.generateDebtAndProvideLiquidityUniswap = function (ethValue, manager, taxCollector, coinJoin, uniswapRouter, safe, wad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "generateDebtAndProvideLiquidityUniswap", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            coinJoin,
            uniswapRouter,
            safe,
            wad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.getLockedReward = function (incentives, campaignId) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "campaignId", "type": "uint256" }], "name": "getLockedReward", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, campaignId]);
    };
    GebProxyIncentivesActions.prototype.getRewards = function (incentives, campaignId) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "campaignId", "type": "uint256" }], "name": "getRewards", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, campaignId]);
    };
    GebProxyIncentivesActions.prototype.getWethPair = function (uniswapRouter, token, multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "token", "type": "address" }], "name": "getWethPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [uniswapRouter, token], multicall);
    };
    GebProxyIncentivesActions.prototype.harvestReward = function (incentives, campaignId) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "campaignId", "type": "uint256" }], "name": "harvestReward", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, campaignId]);
    };
    GebProxyIncentivesActions.prototype.lockETH = function (ethValue, manager, ethJoin, safe) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }], "name": "lockETH", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [manager, ethJoin, safe], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.lockETHGenerateDebtProvideLiquidityStake = function (ethValue, manager, taxCollector, ethJoin, coinJoin, uniswapRouter, incentives, safe, deltaWad, liquidityWad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "uint256", "name": "deltaWad", "type": "uint256" }, { "internalType": "uint256", "name": "liquidityWad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "lockETHGenerateDebtProvideLiquidityStake", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            uniswapRouter,
            incentives,
            safe,
            deltaWad,
            liquidityWad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.lockETHGenerateDebtProvideLiquidityUniswap = function (ethValue, manager, taxCollector, ethJoin, coinJoin, uniswapRouter, safe, deltaWad, liquidityWad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "uint256", "name": "deltaWad", "type": "uint256" }, { "internalType": "uint256", "name": "liquidityWad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "lockETHGenerateDebtProvideLiquidityUniswap", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            uniswapRouter,
            safe,
            deltaWad,
            liquidityWad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.modifySAFECollateralization = function (manager, safe, deltaCollateral, deltaDebt) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "int256", "name": "deltaCollateral", "type": "int256" }, { "internalType": "int256", "name": "deltaDebt", "type": "int256" }], "name": "modifySAFECollateralization", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            safe,
            deltaCollateral,
            deltaDebt,
        ]);
    };
    GebProxyIncentivesActions.prototype.openLockETHGenerateDebtProvideLiquidityStake = function (ethValue, manager, taxCollector, ethJoin, coinJoin, uniswapRouter, incentives, collateralType, deltaWad, liquidityWad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "bytes32", "name": "collateralType", "type": "bytes32" }, { "internalType": "uint256", "name": "deltaWad", "type": "uint256" }, { "internalType": "uint256", "name": "liquidityWad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "openLockETHGenerateDebtProvideLiquidityStake", "outputs": [{ "internalType": "uint256", "name": "safe", "type": "uint256" }], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            uniswapRouter,
            incentives,
            collateralType,
            deltaWad,
            liquidityWad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.openLockETHGenerateDebtProvideLiquidityUniswap = function (ethValue, manager, taxCollector, ethJoin, coinJoin, uniswapRouter, collateralType, deltaWad, liquidityWad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "taxCollector", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "bytes32", "name": "collateralType", "type": "bytes32" }, { "internalType": "uint256", "name": "deltaWad", "type": "uint256" }, { "internalType": "uint256", "name": "liquidityWad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "openLockETHGenerateDebtProvideLiquidityUniswap", "outputs": [{ "internalType": "uint256", "name": "safe", "type": "uint256" }], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            uniswapRouter,
            collateralType,
            deltaWad,
            liquidityWad,
            minTokenAmounts,
        ], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.openSAFE = function (manager, collateralType, usr) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "bytes32", "name": "collateralType", "type": "bytes32" }, { "internalType": "address", "name": "usr", "type": "address" }], "name": "openSAFE", "outputs": [{ "internalType": "uint256", "name": "safe", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [manager, collateralType, usr]);
    };
    GebProxyIncentivesActions.prototype.provideLiquidityStake = function (ethValue, coinJoin, uniswapRouter, incentives, wad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "provideLiquidityStake", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [coinJoin, uniswapRouter, incentives, wad, minTokenAmounts], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.provideLiquidityUniswap = function (ethValue, coinJoin, uniswapRouter, wad, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "provideLiquidityUniswap", "outputs": [], "stateMutability": "payable", "type": "function" };
        return this.getTransactionRequest(abi, [coinJoin, uniswapRouter, wad, minTokenAmounts], bignumber_1.BigNumber.from(ethValue));
    };
    GebProxyIncentivesActions.prototype.removeLiquidityUniswap = function (uniswapRouter, systemCoin, value, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "systemCoin", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "removeLiquidityUniswap", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            uniswapRouter,
            systemCoin,
            value,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.stakeInMine = function (incentives, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "stakeInMine", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, wad]);
    };
    GebProxyIncentivesActions.prototype.transfer = function (collateral, dst, amt) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "collateral", "type": "address" }, { "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "amt", "type": "uint256" }], "name": "transfer", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [collateral, dst, amt]);
    };
    GebProxyIncentivesActions.prototype.transferCollateral = function (manager, safe, dst, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "transferCollateral", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [manager, safe, dst, wad]);
    };
    GebProxyIncentivesActions.prototype.transferInternalCoins = function (manager, safe, dst, rad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "rad", "type": "uint256" }], "name": "transferInternalCoins", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [manager, safe, dst, rad]);
    };
    GebProxyIncentivesActions.prototype.withdrawAndHarvest = function (incentives, value, campaignId) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "campaignId", "type": "uint256" }], "name": "withdrawAndHarvest", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, value, campaignId]);
    };
    GebProxyIncentivesActions.prototype.withdrawAndRemoveLiquidity = function (coinJoin, incentives, value, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "withdrawAndRemoveLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            coinJoin,
            incentives,
            value,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.withdrawFromMine = function (incentives, value) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "withdrawFromMine", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [incentives, value]);
    };
    GebProxyIncentivesActions.prototype.withdrawHarvestRemoveLiquidity = function (incentives, uniswapRouter, systemCoin, value, campaignId, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "address", "name": "systemCoin", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "campaignId", "type": "uint256" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "withdrawHarvestRemoveLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            incentives,
            uniswapRouter,
            systemCoin,
            value,
            campaignId,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.withdrawRemoveLiquidityRepayDebt = function (manager, coinJoin, safe, incentives, value, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "withdrawRemoveLiquidityRepayDebt", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            coinJoin,
            safe,
            incentives,
            value,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    GebProxyIncentivesActions.prototype.withdrawRemoveLiquidityRepayDebtFreeETH = function (manager, ethJoin, coinJoin, safe, incentives, valueToWithdraw, ethToFree, uniswapRouter, minTokenAmounts) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }, { "internalType": "address", "name": "incentives", "type": "address" }, { "internalType": "uint256", "name": "valueToWithdraw", "type": "uint256" }, { "internalType": "uint256", "name": "ethToFree", "type": "uint256" }, { "internalType": "address", "name": "uniswapRouter", "type": "address" }, { "internalType": "uint256[2]", "name": "minTokenAmounts", "type": "uint256[2]" }], "name": "withdrawRemoveLiquidityRepayDebtFreeETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            ethJoin,
            coinJoin,
            safe,
            incentives,
            valueToWithdraw,
            ethToFree,
            uniswapRouter,
            minTokenAmounts,
        ]);
    };
    return GebProxyIncentivesActions;
}(geb_contract_base_1.BaseContractAPI));
exports.GebProxyIncentivesActions = GebProxyIncentivesActions;
