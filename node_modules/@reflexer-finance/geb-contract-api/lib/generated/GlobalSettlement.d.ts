import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class GlobalSettlement extends BaseContractAPI {
    accountingEngine(): Promise<string>;
    accountingEngine(multicall: true): MulticallRequest<string>;
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    calculateCashPrice(collateralType: BytesLike): TransactionRequest;
    coinBag(address: string): Promise<BigNumber>;
    coinBag(address: string, multicall: true): MulticallRequest<BigNumber>;
    coinSavingsAccount(): Promise<string>;
    coinSavingsAccount(multicall: true): MulticallRequest<string>;
    coinsUsedToRedeem(bytes: BytesLike, address: string): Promise<BigNumber>;
    coinsUsedToRedeem(bytes: BytesLike, address: string, multicall: true): MulticallRequest<BigNumber>;
    collateralCashPrice(bytes: BytesLike): Promise<BigNumber>;
    collateralCashPrice(bytes: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    collateralShortfall(bytes: BytesLike): Promise<BigNumber>;
    collateralShortfall(bytes: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    collateralTotalDebt(bytes: BytesLike): Promise<BigNumber>;
    collateralTotalDebt(bytes: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    fastTrackAuction(collateralType: BytesLike, auctionId: BigNumberish): TransactionRequest;
    finalCoinPerCollateralPrice(bytes: BytesLike): Promise<BigNumber>;
    finalCoinPerCollateralPrice(bytes: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    freeCollateral(collateralType: BytesLike): TransactionRequest;
    freezeCollateralType(collateralType: BytesLike): TransactionRequest;
    liquidationEngine(): Promise<string>;
    liquidationEngine(multicall: true): MulticallRequest<string>;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    oracleRelayer(): Promise<string>;
    oracleRelayer(multicall: true): MulticallRequest<string>;
    outstandingCoinSupply(): Promise<BigNumber>;
    outstandingCoinSupply(multicall: true): MulticallRequest<BigNumber>;
    prepareCoinsForRedeeming(coinAmount: BigNumberish): TransactionRequest;
    processSAFE(collateralType: BytesLike, safe: string): TransactionRequest;
    redeemCollateral(collateralType: BytesLike, coinsAmount: BigNumberish): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    setOutstandingCoinSupply(): TransactionRequest;
    shutdownCooldown(): Promise<BigNumber>;
    shutdownCooldown(multicall: true): MulticallRequest<BigNumber>;
    shutdownSystem(): TransactionRequest;
    shutdownTime(): Promise<BigNumber>;
    shutdownTime(multicall: true): MulticallRequest<BigNumber>;
    stabilityFeeTreasury(): Promise<string>;
    stabilityFeeTreasury(multicall: true): MulticallRequest<string>;
}
