import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class RateSetter extends BaseContractAPI {
    RAY(): Promise<BigNumber>;
    RAY(multicall: true): MulticallRequest<BigNumber>;
    WAD(): Promise<BigNumber>;
    WAD(multicall: true): MulticallRequest<BigNumber>;
    addAuthorization(account: string): TransactionRequest;
    addition__Uint256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    addition__Uint256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    addition__Int256Int256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    addition__Int256Int256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    addition__Uint256Int256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    addition__Uint256Int256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    baseUpdateCallerReward(): Promise<BigNumber>;
    baseUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    disableContract(): TransactionRequest;
    getCallerReward(): Promise<BigNumber>;
    getCallerReward(multicall: true): MulticallRequest<BigNumber>;
    getRedemptionAndMarketPrices(): TransactionRequest;
    lastUpdateTime(): Promise<BigNumber>;
    lastUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    latestMarketPrice(): Promise<BigNumber>;
    latestMarketPrice(multicall: true): MulticallRequest<BigNumber>;
    maxUpdateCallerReward(): Promise<BigNumber>;
    maxUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    minimum(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    minimum(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, val: BigNumberish): TransactionRequest;
    multiply__Uint256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    multiply__Uint256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    multiply__Int256Int256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    multiply__Int256Int256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    multiply__Int256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    multiply__Int256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    oracleRelayer(): Promise<string>;
    oracleRelayer(multicall: true): MulticallRequest<string>;
    orcl(): Promise<string>;
    orcl(multicall: true): MulticallRequest<string>;
    perSecondCallerRewardIncrease(): Promise<BigNumber>;
    perSecondCallerRewardIncrease(multicall: true): MulticallRequest<BigNumber>;
    pidCalculator(): Promise<string>;
    pidCalculator(multicall: true): MulticallRequest<string>;
    rad(x: BigNumberish): Promise<BigNumber>;
    rad(x: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    ray(x: BigNumberish): Promise<BigNumber>;
    ray(x: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    rdivide(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    rdivide(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    rmultiply__Uint256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    rmultiply__Uint256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    rmultiply__Uint256Int256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    rmultiply__Uint256Int256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    rpower(x: BigNumberish, n: BigNumberish, base: BigNumberish): Promise<BigNumber>;
    rpower(x: BigNumberish, n: BigNumberish, base: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    subtract__Uint256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    subtract__Uint256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    subtract__Int256Int256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    subtract__Int256Int256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    treasury(): Promise<string>;
    treasury(multicall: true): MulticallRequest<string>;
    treasuryAllowance(): Promise<BigNumber>;
    treasuryAllowance(multicall: true): MulticallRequest<BigNumber>;
    updateRate(feeReceiver: string): TransactionRequest;
    updateRateDelay(): Promise<BigNumber>;
    updateRateDelay(multicall: true): MulticallRequest<BigNumber>;
    wdivide(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    wdivide(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    wmultiply__Uint256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    wmultiply__Uint256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    wmultiply__Int256Uint256(x: BigNumberish, y: BigNumberish): Promise<BigNumber>;
    wmultiply__Int256Uint256(x: BigNumberish, y: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
}
