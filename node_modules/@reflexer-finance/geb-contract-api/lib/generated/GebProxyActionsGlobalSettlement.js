"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GebProxyActionsGlobalSettlement = void 0;
var geb_contract_base_1 = require("@reflexer-finance/geb-contract-base");
var GebProxyActionsGlobalSettlement = /** @class */ (function (_super) {
    __extends(GebProxyActionsGlobalSettlement, _super);
    function GebProxyActionsGlobalSettlement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GebProxyActionsGlobalSettlement.prototype.coinJoin_join = function (apt, safeHandler, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "apt", "type": "address" }, { "internalType": "address", "name": "safeHandler", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "coinJoin_join", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [apt, safeHandler, wad]);
    };
    GebProxyActionsGlobalSettlement.prototype.freeETH = function (manager, ethJoin, globalSettlement, safe) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "globalSettlement", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }], "name": "freeETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            ethJoin,
            globalSettlement,
            safe,
        ]);
    };
    GebProxyActionsGlobalSettlement.prototype.freeTokenCollateral = function (manager, collateralJoin, globalSettlement, safe) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "manager", "type": "address" }, { "internalType": "address", "name": "collateralJoin", "type": "address" }, { "internalType": "address", "name": "globalSettlement", "type": "address" }, { "internalType": "uint256", "name": "safe", "type": "uint256" }], "name": "freeTokenCollateral", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            manager,
            collateralJoin,
            globalSettlement,
            safe,
        ]);
    };
    GebProxyActionsGlobalSettlement.prototype.prepareCoinsForRedeeming = function (coinJoin, globalSettlement, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "coinJoin", "type": "address" }, { "internalType": "address", "name": "globalSettlement", "type": "address" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "prepareCoinsForRedeeming", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            coinJoin,
            globalSettlement,
            wad,
        ]);
    };
    GebProxyActionsGlobalSettlement.prototype.redeemETH = function (ethJoin, globalSettlement, collateralType, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "ethJoin", "type": "address" }, { "internalType": "address", "name": "globalSettlement", "type": "address" }, { "internalType": "bytes32", "name": "collateralType", "type": "bytes32" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "redeemETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            ethJoin,
            globalSettlement,
            collateralType,
            wad,
        ]);
    };
    GebProxyActionsGlobalSettlement.prototype.redeemTokenCollateral = function (collateralJoin, globalSettlement, collateralType, wad) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "collateralJoin", "type": "address" }, { "internalType": "address", "name": "globalSettlement", "type": "address" }, { "internalType": "bytes32", "name": "collateralType", "type": "bytes32" }, { "internalType": "uint256", "name": "wad", "type": "uint256" }], "name": "redeemTokenCollateral", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            collateralJoin,
            globalSettlement,
            collateralType,
            wad,
        ]);
    };
    return GebProxyActionsGlobalSettlement;
}(geb_contract_base_1.BaseContractAPI));
exports.GebProxyActionsGlobalSettlement = GebProxyActionsGlobalSettlement;
