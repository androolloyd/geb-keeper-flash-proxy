import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class OracleRelayer extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    collateralTypes(bytes: BytesLike): Promise<{
        orcl: string;
        safetyCRatio: BigNumber;
        liquidationCRatio: BigNumber;
    }>;
    collateralTypes(bytes: BytesLike, multicall: true): MulticallRequest<{
        orcl: string;
        safetyCRatio: BigNumber;
        liquidationCRatio: BigNumber;
    }>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    disableContract(): TransactionRequest;
    liquidationCRatio(collateralType: BytesLike): Promise<BigNumber>;
    liquidationCRatio(collateralType: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Bytes32Address(collateralType: BytesLike, parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Bytes32Uint256(collateralType: BytesLike, parameter: BytesLike, data: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    orcl(collateralType: BytesLike): Promise<string>;
    orcl(collateralType: BytesLike, multicall: true): MulticallRequest<string>;
    redemptionPrice(): TransactionRequest;
    redemptionPrice_readOnly(): Promise<BigNumber>;
    redemptionPrice_readOnly(multicall: true): MulticallRequest<BigNumber>;
    redemptionPriceUpdateTime(): Promise<BigNumber>;
    redemptionPriceUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    redemptionRate(): Promise<BigNumber>;
    redemptionRate(multicall: true): MulticallRequest<BigNumber>;
    redemptionRateLowerBound(): Promise<BigNumber>;
    redemptionRateLowerBound(multicall: true): MulticallRequest<BigNumber>;
    redemptionRateUpperBound(): Promise<BigNumber>;
    redemptionRateUpperBound(multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    safetyCRatio(collateralType: BytesLike): Promise<BigNumber>;
    safetyCRatio(collateralType: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    updateCollateralPrice(collateralType: BytesLike): TransactionRequest;
}
