import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class Multicall extends BaseContractAPI {
    aggregate(calls: {
        target: string;
        callData: BytesLike;
    }[]): TransactionRequest;
    aggregate_readOnly(calls: {
        target: string;
        callData: BytesLike;
    }[]): Promise<{
        blockNumber: BigNumber;
        returnData: string[];
    }>;
    aggregate_readOnly(calls: {
        target: string;
        callData: BytesLike;
    }[], multicall: true): MulticallRequest<{
        blockNumber: BigNumber;
        returnData: string[];
    }>;
    getBlockHash(blockNumber: BigNumberish): Promise<string>;
    getBlockHash(blockNumber: BigNumberish, multicall: true): MulticallRequest<string>;
    getCurrentBlockCoinbase(): Promise<string>;
    getCurrentBlockCoinbase(multicall: true): MulticallRequest<string>;
    getCurrentBlockDifficulty(): Promise<BigNumber>;
    getCurrentBlockDifficulty(multicall: true): MulticallRequest<BigNumber>;
    getCurrentBlockGasLimit(): Promise<BigNumber>;
    getCurrentBlockGasLimit(multicall: true): MulticallRequest<BigNumber>;
    getCurrentBlockTimestamp(): Promise<BigNumber>;
    getCurrentBlockTimestamp(multicall: true): MulticallRequest<BigNumber>;
    getEthBalance(addr: string): Promise<BigNumber>;
    getEthBalance(addr: string, multicall: true): MulticallRequest<BigNumber>;
    getLastBlockHash(): Promise<string>;
    getLastBlockHash(multicall: true): MulticallRequest<string>;
}
