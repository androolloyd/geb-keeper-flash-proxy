import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class FixedDiscountCollateralAuctionHouse extends BaseContractAPI {
    AUCTION_HOUSE_TYPE(): Promise<string>;
    AUCTION_HOUSE_TYPE(multicall: true): MulticallRequest<string>;
    AUCTION_TYPE(): Promise<string>;
    AUCTION_TYPE(multicall: true): MulticallRequest<string>;
    addAuthorization(account: string): TransactionRequest;
    amountToRaise(id: BigNumberish): Promise<BigNumber>;
    amountToRaise(id: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    auctionsStarted(): Promise<BigNumber>;
    auctionsStarted(multicall: true): MulticallRequest<BigNumber>;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    bidAmount(id: BigNumberish): Promise<BigNumber>;
    bidAmount(id: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    bids(uinteger: BigNumberish): Promise<{
        raisedAmount: BigNumber;
        soldAmount: BigNumber;
        amountToSell: BigNumber;
        amountToRaise: BigNumber;
        auctionDeadline: number;
        forgoneCollateralReceiver: string;
        auctionIncomeRecipient: string;
    }>;
    bids(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        raisedAmount: BigNumber;
        soldAmount: BigNumber;
        amountToSell: BigNumber;
        amountToRaise: BigNumber;
        auctionDeadline: number;
        forgoneCollateralReceiver: string;
        auctionIncomeRecipient: string;
    }>;
    buyCollateral(id: BigNumberish, wad: BigNumberish): TransactionRequest;
    collateralFSM(): Promise<string>;
    collateralFSM(multicall: true): MulticallRequest<string>;
    collateralMedian(): Promise<string>;
    collateralMedian(multicall: true): MulticallRequest<string>;
    collateralType(): Promise<string>;
    collateralType(multicall: true): MulticallRequest<string>;
    discount(): Promise<BigNumber>;
    discount(multicall: true): MulticallRequest<BigNumber>;
    forgoneCollateralReceiver(id: BigNumberish): Promise<string>;
    forgoneCollateralReceiver(id: BigNumberish, multicall: true): MulticallRequest<string>;
    getAdjustedBid(id: BigNumberish, wad: BigNumberish): Promise<{
        0: boolean;
        1: BigNumber;
    }>;
    getAdjustedBid(id: BigNumberish, wad: BigNumberish, multicall: true): MulticallRequest<{
        0: boolean;
        1: BigNumber;
    }>;
    getApproximateCollateralBought(id: BigNumberish, wad: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getApproximateCollateralBought(id: BigNumberish, wad: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getCollateralBought(id: BigNumberish, wad: BigNumberish): TransactionRequest;
    getCollateralMedianPrice(): Promise<BigNumber>;
    getCollateralMedianPrice(multicall: true): MulticallRequest<BigNumber>;
    getDiscountedCollateralPrice(collateralFsmPriceFeedValue: BigNumberish, collateralMedianPriceFeedValue: BigNumberish, systemCoinPriceFeedValue: BigNumberish, customDiscount: BigNumberish): Promise<BigNumber>;
    getDiscountedCollateralPrice(collateralFsmPriceFeedValue: BigNumberish, collateralMedianPriceFeedValue: BigNumberish, systemCoinPriceFeedValue: BigNumberish, customDiscount: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    getFinalBaseCollateralPrice(collateralFsmPriceFeedValue: BigNumberish, collateralMedianPriceFeedValue: BigNumberish): Promise<BigNumber>;
    getFinalBaseCollateralPrice(collateralFsmPriceFeedValue: BigNumberish, collateralMedianPriceFeedValue: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    getFinalTokenPrices(systemCoinRedemptionPrice: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getFinalTokenPrices(systemCoinRedemptionPrice: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getSystemCoinCeilingDeviatedPrice(redemptionPrice: BigNumberish): Promise<BigNumber>;
    getSystemCoinCeilingDeviatedPrice(redemptionPrice: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    getSystemCoinFloorDeviatedPrice(redemptionPrice: BigNumberish): Promise<BigNumber>;
    getSystemCoinFloorDeviatedPrice(redemptionPrice: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    getSystemCoinMarketPrice(): Promise<BigNumber>;
    getSystemCoinMarketPrice(multicall: true): MulticallRequest<BigNumber>;
    lastReadRedemptionPrice(): Promise<BigNumber>;
    lastReadRedemptionPrice(multicall: true): MulticallRequest<BigNumber>;
    liquidationEngine(): Promise<string>;
    liquidationEngine(multicall: true): MulticallRequest<string>;
    lowerCollateralMedianDeviation(): Promise<BigNumber>;
    lowerCollateralMedianDeviation(multicall: true): MulticallRequest<BigNumber>;
    lowerSystemCoinMedianDeviation(): Promise<BigNumber>;
    lowerSystemCoinMedianDeviation(multicall: true): MulticallRequest<BigNumber>;
    minSystemCoinMedianDeviation(): Promise<BigNumber>;
    minSystemCoinMedianDeviation(multicall: true): MulticallRequest<BigNumber>;
    minimumBid(): Promise<BigNumber>;
    minimumBid(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    oracleRelayer(): Promise<string>;
    oracleRelayer(multicall: true): MulticallRequest<string>;
    raisedAmount(id: BigNumberish): Promise<BigNumber>;
    raisedAmount(id: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    remainingAmountToSell(id: BigNumberish): Promise<BigNumber>;
    remainingAmountToSell(id: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    settleAuction(id: BigNumberish): TransactionRequest;
    startAuction(forgoneCollateralReceiver: string, auctionIncomeRecipient: string, amountToRaise: BigNumberish, amountToSell: BigNumberish, initialBid: BigNumberish): TransactionRequest;
    systemCoinOracle(): Promise<string>;
    systemCoinOracle(multicall: true): MulticallRequest<string>;
    terminateAuctionPrematurely(id: BigNumberish): TransactionRequest;
    totalAuctionLength(): Promise<number>;
    totalAuctionLength(multicall: true): MulticallRequest<number>;
    upperCollateralMedianDeviation(): Promise<BigNumber>;
    upperCollateralMedianDeviation(multicall: true): MulticallRequest<BigNumber>;
    upperSystemCoinMedianDeviation(): Promise<BigNumber>;
    upperSystemCoinMedianDeviation(multicall: true): MulticallRequest<BigNumber>;
}
