import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class DsToken extends BaseContractAPI {
    allowance(src: string, guy: string): Promise<BigNumber>;
    allowance(src: string, guy: string, multicall: true): MulticallRequest<BigNumber>;
    approve__AddressUint256(guy: string, wad: BigNumberish): TransactionRequest;
    approve__Address(guy: string): TransactionRequest;
    authority(): Promise<string>;
    authority(multicall: true): MulticallRequest<string>;
    balanceOf(src: string): Promise<BigNumber>;
    balanceOf(src: string, multicall: true): MulticallRequest<BigNumber>;
    burn__Uint256(wad: BigNumberish): TransactionRequest;
    burn__AddressUint256(guy: string, wad: BigNumberish): TransactionRequest;
    decimals(): Promise<BigNumber>;
    decimals(multicall: true): MulticallRequest<BigNumber>;
    mint__AddressUint256(guy: string, wad: BigNumberish): TransactionRequest;
    mint__Uint256(wad: BigNumberish): TransactionRequest;
    move(src: string, dst: string, wad: BigNumberish): TransactionRequest;
    name(): Promise<string>;
    name(multicall: true): MulticallRequest<string>;
    owner(): Promise<string>;
    owner(multicall: true): MulticallRequest<string>;
    pull(src: string, wad: BigNumberish): TransactionRequest;
    push(dst: string, wad: BigNumberish): TransactionRequest;
    setAuthority(authority_: string): TransactionRequest;
    setOwner(owner_: string): TransactionRequest;
    start(): TransactionRequest;
    stop(): TransactionRequest;
    stopped(): Promise<boolean>;
    stopped(multicall: true): MulticallRequest<boolean>;
    symbol(): Promise<string>;
    symbol(multicall: true): MulticallRequest<string>;
    totalSupply(): Promise<BigNumber>;
    totalSupply(multicall: true): MulticallRequest<BigNumber>;
    transfer(dst: string, wad: BigNumberish): TransactionRequest;
    transferFrom(src: string, dst: string, wad: BigNumberish): TransactionRequest;
}
