import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
export declare class GebProxyIncentivesActions extends BaseContractAPI {
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    ethJoin_join__AddressAddress(ethValue: BigNumberish, apt: string, safe: string): TransactionRequest;
    ethJoin_join__AddressAddressUint256(ethValue: BigNumberish, apt: string, safe: string, value: BigNumberish): TransactionRequest;
    exitAndRemoveLiquidity(coinJoin: string, incentives: string, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    exitMine(incentives: string): TransactionRequest;
    exitRemoveLiquidityRepayDebt(manager: string, coinJoin: string, safe: BigNumberish, incentives: string, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    exitRemoveLiquidityRepayDebtFreeETH(manager: string, ethJoin: string, coinJoin: string, safe: BigNumberish, incentives: string, ethToFree: BigNumberish, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    freeETH(manager: string, ethJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    generateDebtAndProvideLiquidityStake(ethValue: BigNumberish, manager: string, taxCollector: string, coinJoin: string, uniswapRouter: string, incentives: string, safe: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    generateDebtAndProvideLiquidityUniswap(ethValue: BigNumberish, manager: string, taxCollector: string, coinJoin: string, uniswapRouter: string, safe: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    getLockedReward(incentives: string, campaignId: BigNumberish): TransactionRequest;
    getRewards(incentives: string, campaignId: BigNumberish): TransactionRequest;
    getWethPair(uniswapRouter: string, token: string): Promise<string>;
    getWethPair(uniswapRouter: string, token: string, multicall: true): MulticallRequest<string>;
    harvestReward(incentives: string, campaignId: BigNumberish): TransactionRequest;
    lockETH(ethValue: BigNumberish, manager: string, ethJoin: string, safe: BigNumberish): TransactionRequest;
    lockETHGenerateDebtProvideLiquidityStake(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, uniswapRouter: string, incentives: string, safe: BigNumberish, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    lockETHGenerateDebtProvideLiquidityUniswap(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, uniswapRouter: string, safe: BigNumberish, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    modifySAFECollateralization(manager: string, safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    openLockETHGenerateDebtProvideLiquidityStake(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, uniswapRouter: string, incentives: string, collateralType: BytesLike, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    openLockETHGenerateDebtProvideLiquidityUniswap(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, uniswapRouter: string, collateralType: BytesLike, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    openSAFE(manager: string, collateralType: BytesLike, usr: string): TransactionRequest;
    provideLiquidityStake(ethValue: BigNumberish, coinJoin: string, uniswapRouter: string, incentives: string, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    provideLiquidityUniswap(ethValue: BigNumberish, coinJoin: string, uniswapRouter: string, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    removeLiquidityUniswap(uniswapRouter: string, systemCoin: string, value: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    stakeInMine(incentives: string, wad: BigNumberish): TransactionRequest;
    transfer(collateral: string, dst: string, amt: BigNumberish): TransactionRequest;
    transferCollateral(manager: string, safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(manager: string, safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    withdrawAndHarvest(incentives: string, value: BigNumberish, campaignId: BigNumberish): TransactionRequest;
    withdrawAndRemoveLiquidity(coinJoin: string, incentives: string, value: BigNumberish, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawFromMine(incentives: string, value: BigNumberish): TransactionRequest;
    withdrawHarvestRemoveLiquidity(incentives: string, uniswapRouter: string, systemCoin: string, value: BigNumberish, campaignId: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawRemoveLiquidityRepayDebt(manager: string, coinJoin: string, safe: BigNumberish, incentives: string, value: BigNumberish, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawRemoveLiquidityRepayDebtFreeETH(manager: string, ethJoin: string, coinJoin: string, safe: BigNumberish, incentives: string, valueToWithdraw: BigNumberish, ethToFree: BigNumberish, uniswapRouter: string, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
}
