import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class ChainlinkMedianEthusd extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    baseUpdateCallerReward(): Promise<BigNumber>;
    baseUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    chainlinkAggregator(): Promise<string>;
    chainlinkAggregator(multicall: true): MulticallRequest<string>;
    getCallerReward(): Promise<BigNumber>;
    getCallerReward(multicall: true): MulticallRequest<BigNumber>;
    getResultWithValidity(): Promise<{
        0: BigNumber;
        1: boolean;
    }>;
    getResultWithValidity(multicall: true): MulticallRequest<{
        0: BigNumber;
        1: boolean;
    }>;
    lastUpdateTime(): Promise<BigNumber>;
    lastUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    linkAggregatorTimestamp(): Promise<BigNumber>;
    linkAggregatorTimestamp(multicall: true): MulticallRequest<BigNumber>;
    maxRewardIncreaseDelay(): Promise<BigNumber>;
    maxRewardIncreaseDelay(multicall: true): MulticallRequest<BigNumber>;
    maxUpdateCallerReward(): Promise<BigNumber>;
    maxUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    multiplier(): Promise<number>;
    multiplier(multicall: true): MulticallRequest<number>;
    perSecondCallerRewardIncrease(): Promise<BigNumber>;
    perSecondCallerRewardIncrease(multicall: true): MulticallRequest<BigNumber>;
    periodSize(): Promise<BigNumber>;
    periodSize(multicall: true): MulticallRequest<BigNumber>;
    read(): Promise<BigNumber>;
    read(multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    staleThreshold(): Promise<BigNumber>;
    staleThreshold(multicall: true): MulticallRequest<BigNumber>;
    symbol(): Promise<string>;
    symbol(multicall: true): MulticallRequest<string>;
    treasury(): Promise<string>;
    treasury(multicall: true): MulticallRequest<string>;
    treasuryAllowance(): Promise<BigNumber>;
    treasuryAllowance(multicall: true): MulticallRequest<BigNumber>;
    updateResult(feeReceiver: string): TransactionRequest;
}
