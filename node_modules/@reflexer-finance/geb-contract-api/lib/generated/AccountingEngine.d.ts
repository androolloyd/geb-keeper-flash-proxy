import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class AccountingEngine extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    auctionDebt(): TransactionRequest;
    auctionSurplus(): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    cancelAuctionedDebtWithSurplus(rad: BigNumberish): TransactionRequest;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    debtAuctionBidSize(): Promise<BigNumber>;
    debtAuctionBidSize(multicall: true): MulticallRequest<BigNumber>;
    debtAuctionHouse(): Promise<string>;
    debtAuctionHouse(multicall: true): MulticallRequest<string>;
    debtPoppers(uinteger: BigNumberish): Promise<string>;
    debtPoppers(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    debtQueue(uinteger: BigNumberish): Promise<BigNumber>;
    debtQueue(uinteger: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    disableContract(): TransactionRequest;
    disableCooldown(): Promise<BigNumber>;
    disableCooldown(multicall: true): MulticallRequest<BigNumber>;
    disableTimestamp(): Promise<BigNumber>;
    disableTimestamp(multicall: true): MulticallRequest<BigNumber>;
    initialDebtAuctionMintedTokens(): Promise<BigNumber>;
    initialDebtAuctionMintedTokens(multicall: true): MulticallRequest<BigNumber>;
    lastSurplusAuctionTime(): Promise<BigNumber>;
    lastSurplusAuctionTime(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    popDebtDelay(): Promise<BigNumber>;
    popDebtDelay(multicall: true): MulticallRequest<BigNumber>;
    popDebtFromQueue(debtBlockTimestamp: BigNumberish): TransactionRequest;
    postSettlementSurplusDrain(): Promise<string>;
    postSettlementSurplusDrain(multicall: true): MulticallRequest<string>;
    protocolTokenAuthority(): Promise<string>;
    protocolTokenAuthority(multicall: true): MulticallRequest<string>;
    pushDebtToQueue(debtBlock: BigNumberish): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    settleDebt(rad: BigNumberish): TransactionRequest;
    surplusAuctionAmountToSell(): Promise<BigNumber>;
    surplusAuctionAmountToSell(multicall: true): MulticallRequest<BigNumber>;
    surplusAuctionDelay(): Promise<BigNumber>;
    surplusAuctionDelay(multicall: true): MulticallRequest<BigNumber>;
    surplusAuctionHouse(): Promise<string>;
    surplusAuctionHouse(multicall: true): MulticallRequest<string>;
    surplusBuffer(): Promise<BigNumber>;
    surplusBuffer(multicall: true): MulticallRequest<BigNumber>;
    totalOnAuctionDebt(): Promise<BigNumber>;
    totalOnAuctionDebt(multicall: true): MulticallRequest<BigNumber>;
    totalQueuedDebt(): Promise<BigNumber>;
    totalQueuedDebt(multicall: true): MulticallRequest<BigNumber>;
    transferPostSettlementSurplus(): TransactionRequest;
    unqueuedUnauctionedDebt(): Promise<BigNumber>;
    unqueuedUnauctionedDebt(multicall: true): MulticallRequest<BigNumber>;
}
