import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class LiquidationEngine extends BaseContractAPI {
    accountingEngine(): Promise<string>;
    accountingEngine(multicall: true): MulticallRequest<string>;
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    chosenSAFESaviour(bytes: BytesLike, address: string): Promise<string>;
    chosenSAFESaviour(bytes: BytesLike, address: string, multicall: true): MulticallRequest<string>;
    collateralTypes(bytes: BytesLike): Promise<{
        collateralAuctionHouse: string;
        liquidationPenalty: BigNumber;
        liquidationQuantity: BigNumber;
    }>;
    collateralTypes(bytes: BytesLike, multicall: true): MulticallRequest<{
        collateralAuctionHouse: string;
        liquidationPenalty: BigNumber;
        liquidationQuantity: BigNumber;
    }>;
    connectSAFESaviour(saviour: string): TransactionRequest;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    currentOnAuctionSystemCoins(): Promise<BigNumber>;
    currentOnAuctionSystemCoins(multicall: true): MulticallRequest<BigNumber>;
    disableContract(): TransactionRequest;
    disconnectSAFESaviour(saviour: string): TransactionRequest;
    liquidateSAFE(collateralType: BytesLike, safe: string): TransactionRequest;
    modifyParameters__Bytes32Bytes32Address(collateralType: BytesLike, parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Bytes32Uint256(collateralType: BytesLike, parameter: BytesLike, data: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    mutex(bytes: BytesLike, address: string): Promise<number>;
    mutex(bytes: BytesLike, address: string, multicall: true): MulticallRequest<number>;
    onAuctionSystemCoinLimit(): Promise<BigNumber>;
    onAuctionSystemCoinLimit(multicall: true): MulticallRequest<BigNumber>;
    protectSAFE(collateralType: BytesLike, safe: string, saviour: string): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    removeCoinsFromAuction(rad: BigNumberish): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    safeSaviours(address: string): Promise<BigNumber>;
    safeSaviours(address: string, multicall: true): MulticallRequest<BigNumber>;
}
