import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class DebtAuctionHouse extends BaseContractAPI {
    AUCTION_HOUSE_TYPE(): Promise<string>;
    AUCTION_HOUSE_TYPE(multicall: true): MulticallRequest<string>;
    accountingEngine(): Promise<string>;
    accountingEngine(multicall: true): MulticallRequest<string>;
    activeDebtAuctions(): Promise<BigNumber>;
    activeDebtAuctions(multicall: true): MulticallRequest<BigNumber>;
    addAuthorization(account: string): TransactionRequest;
    amountSoldIncrease(): Promise<BigNumber>;
    amountSoldIncrease(multicall: true): MulticallRequest<BigNumber>;
    auctionsStarted(): Promise<BigNumber>;
    auctionsStarted(multicall: true): MulticallRequest<BigNumber>;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    bidDecrease(): Promise<BigNumber>;
    bidDecrease(multicall: true): MulticallRequest<BigNumber>;
    bidDuration(): Promise<number>;
    bidDuration(multicall: true): MulticallRequest<number>;
    bids(uinteger: BigNumberish): Promise<{
        bidAmount: BigNumber;
        amountToSell: BigNumber;
        highBidder: string;
        bidExpiry: number;
        auctionDeadline: number;
    }>;
    bids(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        bidAmount: BigNumber;
        amountToSell: BigNumber;
        highBidder: string;
        bidExpiry: number;
        auctionDeadline: number;
    }>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    decreaseSoldAmount(id: BigNumberish, amountToBuy: BigNumberish, bid: BigNumberish): TransactionRequest;
    disableContract(): TransactionRequest;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    protocolToken(): Promise<string>;
    protocolToken(multicall: true): MulticallRequest<string>;
    removeAuthorization(account: string): TransactionRequest;
    restartAuction(id: BigNumberish): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    settleAuction(id: BigNumberish): TransactionRequest;
    startAuction(incomeReceiver: string, amountToSell: BigNumberish, initialBid: BigNumberish): TransactionRequest;
    terminateAuctionPrematurely(id: BigNumberish): TransactionRequest;
    totalAuctionLength(): Promise<number>;
    totalAuctionLength(multicall: true): MulticallRequest<number>;
}
