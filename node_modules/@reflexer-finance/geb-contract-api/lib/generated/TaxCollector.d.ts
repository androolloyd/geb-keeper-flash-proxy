import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class TaxCollector extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    collateralList(uinteger: BigNumberish): Promise<string>;
    collateralList(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    collateralListLength(): Promise<BigNumber>;
    collateralListLength(multicall: true): MulticallRequest<BigNumber>;
    collateralTypes(bytes: BytesLike): Promise<{
        stabilityFee: BigNumber;
        updateTime: BigNumber;
    }>;
    collateralTypes(bytes: BytesLike, multicall: true): MulticallRequest<{
        stabilityFee: BigNumber;
        updateTime: BigNumber;
    }>;
    collectedManyTax(start: BigNumberish, end: BigNumberish): Promise<boolean>;
    collectedManyTax(start: BigNumberish, end: BigNumberish, multicall: true): MulticallRequest<boolean>;
    globalStabilityFee(): Promise<BigNumber>;
    globalStabilityFee(multicall: true): MulticallRequest<BigNumber>;
    initializeCollateralType(collateralType: BytesLike): TransactionRequest;
    isSecondaryReceiver(_receiver: BigNumberish): Promise<boolean>;
    isSecondaryReceiver(_receiver: BigNumberish, multicall: true): MulticallRequest<boolean>;
    latestSecondaryReceiver(): Promise<BigNumber>;
    latestSecondaryReceiver(multicall: true): MulticallRequest<BigNumber>;
    maxSecondaryReceivers(): Promise<BigNumber>;
    maxSecondaryReceivers(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Uint256Uint256Address(collateralType: BytesLike, position: BigNumberish, taxPercentage: BigNumberish, receiverAccount: string): TransactionRequest;
    modifyParameters__Bytes32Uint256Uint256(collateralType: BytesLike, position: BigNumberish, val: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Bytes32Uint256(collateralType: BytesLike, parameter: BytesLike, data: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    primaryTaxReceiver(): Promise<string>;
    primaryTaxReceiver(multicall: true): MulticallRequest<string>;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    secondaryReceiverAccounts(uinteger: BigNumberish): Promise<string>;
    secondaryReceiverAccounts(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    secondaryReceiverAllotedTax(bytes: BytesLike): Promise<BigNumber>;
    secondaryReceiverAllotedTax(bytes: BytesLike, multicall: true): MulticallRequest<BigNumber>;
    secondaryReceiverNonce(): Promise<BigNumber>;
    secondaryReceiverNonce(multicall: true): MulticallRequest<BigNumber>;
    secondaryReceiverRevenueSources(address: string): Promise<BigNumber>;
    secondaryReceiverRevenueSources(address: string, multicall: true): MulticallRequest<BigNumber>;
    secondaryReceiversAmount(): Promise<BigNumber>;
    secondaryReceiversAmount(multicall: true): MulticallRequest<BigNumber>;
    secondaryTaxReceivers(bytes: BytesLike, uinteger: BigNumberish): Promise<{
        canTakeBackTax: BigNumber;
        taxPercentage: BigNumber;
    }>;
    secondaryTaxReceivers(bytes: BytesLike, uinteger: BigNumberish, multicall: true): MulticallRequest<{
        canTakeBackTax: BigNumber;
        taxPercentage: BigNumber;
    }>;
    taxMany(start: BigNumberish, end: BigNumberish): TransactionRequest;
    taxManyOutcome(start: BigNumberish, end: BigNumberish): Promise<{
        ok: boolean;
        rad: BigNumber;
    }>;
    taxManyOutcome(start: BigNumberish, end: BigNumberish, multicall: true): MulticallRequest<{
        ok: boolean;
        rad: BigNumber;
    }>;
    taxSingle(collateralType: BytesLike): TransactionRequest;
    taxSingleOutcome(collateralType: BytesLike): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    taxSingleOutcome(collateralType: BytesLike, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    usedSecondaryReceiver(address: string): Promise<BigNumber>;
    usedSecondaryReceiver(address: string, multicall: true): MulticallRequest<BigNumber>;
}
