import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class PiRawPerSecondCalculator extends BaseContractAPI {
    adat(): Promise<BigNumber>;
    adat(multicall: true): MulticallRequest<BigNumber>;
    addAuthority(account: string): TransactionRequest;
    addReader(account: string): TransactionRequest;
    adi(): Promise<BigNumber>;
    adi(multicall: true): MulticallRequest<BigNumber>;
    ag(): Promise<BigNumber>;
    ag(multicall: true): MulticallRequest<BigNumber>;
    allReaderToggle(): Promise<BigNumber>;
    allReaderToggle(multicall: true): MulticallRequest<BigNumber>;
    authorities(address: string): Promise<BigNumber>;
    authorities(address: string, multicall: true): MulticallRequest<BigNumber>;
    breaksNoiseBarrier(piSum: BigNumberish, redemptionPrice: BigNumberish): Promise<boolean>;
    breaksNoiseBarrier(piSum: BigNumberish, redemptionPrice: BigNumberish, multicall: true): MulticallRequest<boolean>;
    computeRate(marketPrice: BigNumberish, redemptionPrice: BigNumberish, accumulatedLeak: BigNumberish): TransactionRequest;
    dgt(): Promise<BigNumber>;
    dgt(multicall: true): MulticallRequest<BigNumber>;
    dos(i: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
    }>;
    dos(i: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
    }>;
    drr(): Promise<BigNumber>;
    drr(multicall: true): MulticallRequest<BigNumber>;
    folb(): Promise<BigNumber>;
    folb(multicall: true): MulticallRequest<BigNumber>;
    foub(): Promise<BigNumber>;
    foub(multicall: true): MulticallRequest<BigNumber>;
    getBoundedRedemptionRate(piOutput: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getBoundedRedemptionRate(piOutput: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getGainAdjustedPIOutput(proportionalTerm: BigNumberish, integralTerm: BigNumberish): Promise<BigNumber>;
    getGainAdjustedPIOutput(proportionalTerm: BigNumberish, integralTerm: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    getGainAdjustedTerms(proportionalTerm: BigNumberish, integralTerm: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getGainAdjustedTerms(proportionalTerm: BigNumberish, integralTerm: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getLastIntegralTerm(): Promise<BigNumber>;
    getLastIntegralTerm(multicall: true): MulticallRequest<BigNumber>;
    getLastProportionalTerm(): Promise<BigNumber>;
    getLastProportionalTerm(multicall: true): MulticallRequest<BigNumber>;
    getNextPriceDeviationCumulative(proportionalTerm: BigNumberish, accumulatedLeak: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getNextPriceDeviationCumulative(proportionalTerm: BigNumberish, accumulatedLeak: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getNextRedemptionRate(marketPrice: BigNumberish, redemptionPrice: BigNumberish, accumulatedLeak: BigNumberish): Promise<{
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
    }>;
    getNextRedemptionRate(marketPrice: BigNumberish, redemptionPrice: BigNumberish, accumulatedLeak: BigNumberish, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
    }>;
    hcd(i: BigNumberish): Promise<BigNumber>;
    hcd(i: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    ips(): Promise<BigNumber>;
    ips(multicall: true): MulticallRequest<BigNumber>;
    lprad(): Promise<BigNumber>;
    lprad(multicall: true): MulticallRequest<BigNumber>;
    lut(): Promise<BigNumber>;
    lut(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Int256(parameter: BytesLike, val: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, val: BigNumberish): TransactionRequest;
    mrt(): Promise<BigNumber>;
    mrt(multicall: true): MulticallRequest<BigNumber>;
    nb(): Promise<BigNumber>;
    nb(multicall: true): MulticallRequest<BigNumber>;
    oll(): Promise<BigNumber>;
    oll(multicall: true): MulticallRequest<BigNumber>;
    pdc(): Promise<BigNumber>;
    pdc(multicall: true): MulticallRequest<BigNumber>;
    pscl(): Promise<BigNumber>;
    pscl(multicall: true): MulticallRequest<BigNumber>;
    readers(address: string): Promise<BigNumber>;
    readers(address: string, multicall: true): MulticallRequest<BigNumber>;
    removeAuthority(account: string): TransactionRequest;
    removeReader(account: string): TransactionRequest;
    rt(marketPrice: BigNumberish, redemptionPrice: BigNumberish, accumulatedLeak: BigNumberish): Promise<BigNumber>;
    rt(marketPrice: BigNumberish, redemptionPrice: BigNumberish, accumulatedLeak: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    seedProposer(): Promise<string>;
    seedProposer(multicall: true): MulticallRequest<string>;
    sg(): Promise<BigNumber>;
    sg(multicall: true): MulticallRequest<BigNumber>;
    tlv(): Promise<BigNumber>;
    tlv(multicall: true): MulticallRequest<BigNumber>;
    uprad(): Promise<BigNumber>;
    uprad(multicall: true): MulticallRequest<BigNumber>;
}
