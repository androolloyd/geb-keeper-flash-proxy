import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class GebUniswapRollingDistributionIncentives extends BaseContractAPI {
    DEFAULT_MAX_CAMPAIGNS(): Promise<BigNumber>;
    DEFAULT_MAX_CAMPAIGNS(multicall: true): MulticallRequest<BigNumber>;
    HUNDRED(): Promise<BigNumber>;
    HUNDRED(multicall: true): MulticallRequest<BigNumber>;
    MILLION(): Promise<BigNumber>;
    MILLION(multicall: true): MulticallRequest<BigNumber>;
    THOUSAND(): Promise<BigNumber>;
    THOUSAND(multicall: true): MulticallRequest<BigNumber>;
    WAD(): Promise<BigNumber>;
    WAD(multicall: true): MulticallRequest<BigNumber>;
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    balanceOf(account: string): Promise<BigNumber>;
    balanceOf(account: string, multicall: true): MulticallRequest<BigNumber>;
    campaignCount(): Promise<BigNumber>;
    campaignCount(multicall: true): MulticallRequest<BigNumber>;
    campaignListLength(): Promise<BigNumber>;
    campaignListLength(multicall: true): MulticallRequest<BigNumber>;
    campaigns(uinteger: BigNumberish): Promise<{
        reward: BigNumber;
        startTime: BigNumber;
        duration: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        rewardDelay: BigNumber;
        instantExitPercentage: BigNumber;
    }>;
    campaigns(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        reward: BigNumber;
        startTime: BigNumber;
        duration: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        rewardDelay: BigNumber;
        instantExitPercentage: BigNumber;
    }>;
    cancelCampaign(campaignId: BigNumberish): TransactionRequest;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    currentCampaign(): Promise<BigNumber>;
    currentCampaign(multicall: true): MulticallRequest<BigNumber>;
    delayedRewards(address: string, uinteger: BigNumberish): Promise<{
        totalAmount: BigNumber;
        exitedAmount: BigNumber;
        latestExitTime: BigNumber;
    }>;
    delayedRewards(address: string, uinteger: BigNumberish, multicall: true): MulticallRequest<{
        totalAmount: BigNumber;
        exitedAmount: BigNumber;
        latestExitTime: BigNumber;
    }>;
    disableContract(): TransactionRequest;
    earned(account: string, campaignId: BigNumberish): Promise<BigNumber>;
    earned(account: string, campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    exit(): TransactionRequest;
    finish(campaignId: BigNumberish): Promise<BigNumber>;
    finish(campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    firstCampaign(): Promise<BigNumber>;
    firstCampaign(multicall: true): MulticallRequest<BigNumber>;
    getLockedReward(account: string, campaignId: BigNumberish): TransactionRequest;
    getReward(campaignId: BigNumberish): TransactionRequest;
    globalReward(): Promise<BigNumber>;
    globalReward(multicall: true): MulticallRequest<BigNumber>;
    lastCampaign(): Promise<BigNumber>;
    lastCampaign(multicall: true): MulticallRequest<BigNumber>;
    lastTimeRewardApplicable(campaignId: BigNumberish): Promise<BigNumber>;
    lastTimeRewardApplicable(campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    lpToken(): Promise<string>;
    lpToken(multicall: true): MulticallRequest<string>;
    maxCampaigns(): Promise<BigNumber>;
    maxCampaigns(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Uint256Uint256(parameter: BytesLike, campaignId: BigNumberish, val: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, val: BigNumberish): TransactionRequest;
    newCampaign(reward: BigNumberish, startTime: BigNumberish, duration: BigNumberish, rewardDelay: BigNumberish, instantExitPercentage: BigNumberish): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    rewardPerToken(campaignId: BigNumberish): Promise<BigNumber>;
    rewardPerToken(campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    rewardToken(): Promise<string>;
    rewardToken(multicall: true): MulticallRequest<string>;
    rewards(owner: string, campaignId: BigNumberish): Promise<BigNumber>;
    rewards(owner: string, campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    stake__Uint256Address(amount: BigNumberish, owner: string): TransactionRequest;
    stake__Uint256(amount: BigNumberish): TransactionRequest;
    totalSupply(): Promise<BigNumber>;
    totalSupply(multicall: true): MulticallRequest<BigNumber>;
    userRewardPerTokenPaid(owner: string, campaignId: BigNumberish): Promise<BigNumber>;
    userRewardPerTokenPaid(owner: string, campaignId: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    withdraw(amount: BigNumberish): TransactionRequest;
    withdrawExtraRewardTokens(): TransactionRequest;
}
