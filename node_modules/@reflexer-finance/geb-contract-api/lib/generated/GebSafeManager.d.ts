import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class GebSafeManager extends BaseContractAPI {
    allowHandler(usr: string, ok: BigNumberish): TransactionRequest;
    allowSAFE(safe: BigNumberish, usr: string, ok: BigNumberish): TransactionRequest;
    collateralTypes(uinteger: BigNumberish): Promise<string>;
    collateralTypes(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    enterSystem(src: string, safe: BigNumberish): TransactionRequest;
    firstSAFEID(address: string): Promise<BigNumber>;
    firstSAFEID(address: string, multicall: true): MulticallRequest<BigNumber>;
    handlerCan(address1: string, address2: string): Promise<BigNumber>;
    handlerCan(address1: string, address2: string, multicall: true): MulticallRequest<BigNumber>;
    lastSAFEID(address: string): Promise<BigNumber>;
    lastSAFEID(address: string, multicall: true): MulticallRequest<BigNumber>;
    modifySAFECollateralization(safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    moveSAFE(safeSrc: BigNumberish, safeDst: BigNumberish): TransactionRequest;
    openSAFE(collateralType: BytesLike, usr: string): TransactionRequest;
    ownsSAFE(uinteger: BigNumberish): Promise<string>;
    ownsSAFE(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    protectSAFE(safe: BigNumberish, liquidationEngine: string, saviour: string): TransactionRequest;
    quitSystem(safe: BigNumberish, dst: string): TransactionRequest;
    safeCan(address1: string, uinteger: BigNumberish, address2: string): Promise<BigNumber>;
    safeCan(address1: string, uinteger: BigNumberish, address2: string, multicall: true): MulticallRequest<BigNumber>;
    safeCount(address: string): Promise<BigNumber>;
    safeCount(address: string, multicall: true): MulticallRequest<BigNumber>;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    safeList(uinteger: BigNumberish): Promise<{
        prev: BigNumber;
        next: BigNumber;
    }>;
    safeList(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        prev: BigNumber;
        next: BigNumber;
    }>;
    safei(): Promise<BigNumber>;
    safei(multicall: true): MulticallRequest<BigNumber>;
    safes(uinteger: BigNumberish): Promise<string>;
    safes(uinteger: BigNumberish, multicall: true): MulticallRequest<string>;
    transferCollateral__Uint256AddressUint256(safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferCollateral__Bytes32Uint256AddressUint256(collateralType: BytesLike, safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFEOwnership(safe: BigNumberish, dst: string): TransactionRequest;
}
