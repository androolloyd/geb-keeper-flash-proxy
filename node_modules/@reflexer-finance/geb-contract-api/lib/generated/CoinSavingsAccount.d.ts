import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class CoinSavingsAccount extends BaseContractAPI {
    accountingEngine(): Promise<string>;
    accountingEngine(multicall: true): MulticallRequest<string>;
    accumulatedRate(): Promise<BigNumber>;
    accumulatedRate(multicall: true): MulticallRequest<BigNumber>;
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    deposit(wad: BigNumberish): TransactionRequest;
    disableContract(): TransactionRequest;
    latestUpdateTime(): Promise<BigNumber>;
    latestUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    nextAccumulatedRate(): Promise<BigNumber>;
    nextAccumulatedRate(multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    savings(address: string): Promise<BigNumber>;
    savings(address: string, multicall: true): MulticallRequest<BigNumber>;
    savingsRate(): Promise<BigNumber>;
    savingsRate(multicall: true): MulticallRequest<BigNumber>;
    totalSavings(): Promise<BigNumber>;
    totalSavings(multicall: true): MulticallRequest<BigNumber>;
    updateAccumulatedRate(): TransactionRequest;
    withdraw(wad: BigNumberish): TransactionRequest;
}
