import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
export declare class GebProxyLeverageActions extends BaseContractAPI {
    allowHandler(manager: string, usr: string, ok: BigNumberish): TransactionRequest;
    allowSAFE(manager: string, safe: BigNumberish, usr: string, ok: BigNumberish): TransactionRequest;
    approveSAFEModification(safeEngine: string, usr: string): TransactionRequest;
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    denySAFEModification(safeEngine: string, usr: string): TransactionRequest;
    enterSystem(manager: string, src: string, safe: BigNumberish): TransactionRequest;
    ethJoin_join__AddressAddress(ethValue: BigNumberish, apt: string, safe: string): TransactionRequest;
    ethJoin_join__AddressAddressUint256(ethValue: BigNumberish, apt: string, safe: string, value: BigNumberish): TransactionRequest;
    exitETH(manager: string, ethJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    flashDeleverage(uniswapV2Pair: string, manager: string, ethJoin: string, taxCollector: string, coinJoin: string, weth: string, callbackProxy: string, safe: BigNumberish): TransactionRequest;
    flashDeleverageFreeETH(uniswapV2Pair: string, manager: string, ethJoin: string, taxCollector: string, coinJoin: string, weth: string, callbackProxy: string, safe: BigNumberish, amountToFree: BigNumberish): TransactionRequest;
    flashLeverage(uniswapV2Pair: string, manager: string, ethJoin: string, taxCollector: string, coinJoin: string, weth: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    freeETH(manager: string, ethJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    generateDebt(manager: string, taxCollector: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    lockETH(ethValue: BigNumberish, manager: string, ethJoin: string, safe: BigNumberish): TransactionRequest;
    lockETHAndGenerateDebt(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, safe: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    lockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, manager: string, ethJoin: string, taxCollector: string, coinJoin: string, weth: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    modifySAFECollateralization(manager: string, safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    moveSAFE(manager: string, safeSrc: BigNumberish, safeDst: BigNumberish): TransactionRequest;
    openLockETHAndGenerateDebt(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, collateralType: BytesLike, deltaWad: BigNumberish): TransactionRequest;
    openLockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, manager: string, ethJoin: string, taxCollector: string, coinJoin: string, weth: string, callbackProxy: string, leverage: BigNumberish): TransactionRequest;
    openSAFE(manager: string, collateralType: BytesLike, usr: string): TransactionRequest;
    quitSystem(manager: string, safe: BigNumberish, dst: string): TransactionRequest;
    repayDebt(manager: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    repayDebtAndFreeETH(manager: string, ethJoin: string, coinJoin: string, safe: BigNumberish, collateralWad: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    transfer(collateral: string, dst: string, amt: BigNumberish): TransactionRequest;
    transferCollateral(manager: string, safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(manager: string, safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFEOwnership(manager: string, safe: BigNumberish, usr: string): TransactionRequest;
    transferSAFEOwnershipToProxy(proxyRegistry: string, manager: string, safe: BigNumberish, dst: string): TransactionRequest;
    uniswapV2Call(_sender: string, _amount0: BigNumberish, _amount1: BigNumberish, _data: BytesLike): TransactionRequest;
}
