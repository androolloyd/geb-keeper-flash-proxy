import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class StabilityFeeTreasury extends BaseContractAPI {
    accountingEngine(): Promise<string>;
    accountingEngine(multicall: true): MulticallRequest<string>;
    accumulatorTag(): Promise<BigNumber>;
    accumulatorTag(multicall: true): MulticallRequest<BigNumber>;
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    coinJoin(): Promise<string>;
    coinJoin(multicall: true): MulticallRequest<string>;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    disableContract(): TransactionRequest;
    expensesAccumulator(): Promise<BigNumber>;
    expensesAccumulator(multicall: true): MulticallRequest<BigNumber>;
    expensesMultiplier(): Promise<BigNumber>;
    expensesMultiplier(multicall: true): MulticallRequest<BigNumber>;
    getAllowance(account: string): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getAllowance(account: string, multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    giveFunds(account: string, rad: BigNumberish): TransactionRequest;
    latestSurplusTransferTime(): Promise<BigNumber>;
    latestSurplusTransferTime(multicall: true): MulticallRequest<BigNumber>;
    minimumFundsRequired(): Promise<BigNumber>;
    minimumFundsRequired(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, addr: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, val: BigNumberish): TransactionRequest;
    pullFunds(dstAccount: string, token: string, wad: BigNumberish): TransactionRequest;
    pulledPerBlock(address: string, uinteger: BigNumberish): Promise<BigNumber>;
    pulledPerBlock(address: string, uinteger: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    safeEngine(): Promise<string>;
    safeEngine(multicall: true): MulticallRequest<string>;
    setPerBlockAllowance(account: string, rad: BigNumberish): TransactionRequest;
    setTotalAllowance(account: string, rad: BigNumberish): TransactionRequest;
    surplusTransferDelay(): Promise<BigNumber>;
    surplusTransferDelay(multicall: true): MulticallRequest<BigNumber>;
    systemCoin(): Promise<string>;
    systemCoin(multicall: true): MulticallRequest<string>;
    takeFunds(account: string, rad: BigNumberish): TransactionRequest;
    transferSurplusFunds(): TransactionRequest;
    treasuryCapacity(): Promise<BigNumber>;
    treasuryCapacity(multicall: true): MulticallRequest<BigNumber>;
}
