import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class SafeEngine extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    approveSAFEModification(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    canModifySAFE(safe: string, account: string): Promise<boolean>;
    canModifySAFE(safe: string, account: string, multicall: true): MulticallRequest<boolean>;
    coinBalance(address: string): Promise<BigNumber>;
    coinBalance(address: string, multicall: true): MulticallRequest<BigNumber>;
    collateralTypes(bytes: BytesLike): Promise<{
        debtAmount: BigNumber;
        accumulatedRate: BigNumber;
        safetyPrice: BigNumber;
        debtCeiling: BigNumber;
        debtFloor: BigNumber;
        liquidationPrice: BigNumber;
    }>;
    collateralTypes(bytes: BytesLike, multicall: true): MulticallRequest<{
        debtAmount: BigNumber;
        accumulatedRate: BigNumber;
        safetyPrice: BigNumber;
        debtCeiling: BigNumber;
        debtFloor: BigNumber;
        liquidationPrice: BigNumber;
    }>;
    confiscateSAFECollateralAndDebt(collateralType: BytesLike, safe: string, collateralCounterparty: string, debtCounterparty: string, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    contractEnabled(): Promise<BigNumber>;
    contractEnabled(multicall: true): MulticallRequest<BigNumber>;
    createUnbackedDebt(debtDestination: string, coinDestination: string, rad: BigNumberish): TransactionRequest;
    debtBalance(address: string): Promise<BigNumber>;
    debtBalance(address: string, multicall: true): MulticallRequest<BigNumber>;
    denySAFEModification(account: string): TransactionRequest;
    disableContract(): TransactionRequest;
    globalDebt(): Promise<BigNumber>;
    globalDebt(multicall: true): MulticallRequest<BigNumber>;
    globalDebtCeiling(): Promise<BigNumber>;
    globalDebtCeiling(multicall: true): MulticallRequest<BigNumber>;
    globalUnbackedDebt(): Promise<BigNumber>;
    globalUnbackedDebt(multicall: true): MulticallRequest<BigNumber>;
    initializeCollateralType(collateralType: BytesLike): TransactionRequest;
    modifyCollateralBalance(collateralType: BytesLike, account: string, wad: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Bytes32Uint256(collateralType: BytesLike, parameter: BytesLike, data: BigNumberish): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    modifySAFECollateralization(collateralType: BytesLike, safe: string, collateralSource: string, debtDestination: string, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    safeDebtCeiling(): Promise<BigNumber>;
    safeDebtCeiling(multicall: true): MulticallRequest<BigNumber>;
    safeRights(address1: string, address2: string): Promise<BigNumber>;
    safeRights(address1: string, address2: string, multicall: true): MulticallRequest<BigNumber>;
    safes(bytes: BytesLike, address: string): Promise<{
        lockedCollateral: BigNumber;
        generatedDebt: BigNumber;
    }>;
    safes(bytes: BytesLike, address: string, multicall: true): MulticallRequest<{
        lockedCollateral: BigNumber;
        generatedDebt: BigNumber;
    }>;
    settleDebt(rad: BigNumberish): TransactionRequest;
    tokenCollateral(bytes: BytesLike, address: string): Promise<BigNumber>;
    tokenCollateral(bytes: BytesLike, address: string, multicall: true): MulticallRequest<BigNumber>;
    transferCollateral(collateralType: BytesLike, src: string, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(src: string, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFECollateralAndDebt(collateralType: BytesLike, src: string, dst: string, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    updateAccumulatedRate(collateralType: BytesLike, surplusDst: string, rateMultiplier: BigNumberish): TransactionRequest;
}
