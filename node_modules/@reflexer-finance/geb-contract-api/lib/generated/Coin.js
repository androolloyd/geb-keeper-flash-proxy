"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coin = void 0;
var geb_contract_base_1 = require("@reflexer-finance/geb-contract-base");
var Coin = /** @class */ (function (_super) {
    __extends(Coin, _super);
    function Coin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Coin.prototype.DOMAIN_SEPARATOR = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "DOMAIN_SEPARATOR", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.PERMIT_TYPEHASH = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.addAuthorization = function (account) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "addAuthorization", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [account]);
    };
    Coin.prototype.allowance = function (address1, address2, multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [address1, address2], multicall);
    };
    Coin.prototype.approve = function (usr, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "usr", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [usr, amount]);
    };
    Coin.prototype.authorizedAccounts = function (address, multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "authorizedAccounts", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [address], multicall);
    };
    Coin.prototype.balanceOf = function (address, multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [address], multicall);
    };
    Coin.prototype.burn = function (usr, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "usr", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [usr, amount]);
    };
    Coin.prototype.chainId = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "chainId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.changeData = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "changeData", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.decimals = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.mint = function (usr, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "usr", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [usr, amount]);
    };
    Coin.prototype.modifyParameters = function (parameter, data) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "bytes32", "name": "parameter", "type": "bytes32" }, { "internalType": "uint256", "name": "data", "type": "uint256" }], "name": "modifyParameters", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [parameter, data]);
    };
    Coin.prototype.move = function (src, dst, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "src", "type": "address" }, { "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "move", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [src, dst, amount]);
    };
    Coin.prototype.name = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.nonces = function (address, multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [address], multicall);
    };
    Coin.prototype.permit = function (holder, spender, nonce, expiry, allowed, v, r, s) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "holder", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }, { "internalType": "uint256", "name": "expiry", "type": "uint256" }, { "internalType": "bool", "name": "allowed", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [
            holder,
            spender,
            nonce,
            expiry,
            allowed,
            v,
            r,
            s,
        ]);
    };
    Coin.prototype.pull = function (usr, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "usr", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "pull", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [usr, amount]);
    };
    Coin.prototype.push = function (usr, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "usr", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "push", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [usr, amount]);
    };
    Coin.prototype.removeAuthorization = function (account) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "removeAuthorization", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [account]);
    };
    Coin.prototype.setName = function (name_) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }], "name": "setName", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [name_]);
    };
    Coin.prototype.setSymbol = function (symbol_) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "string", "name": "symbol_", "type": "string" }], "name": "setSymbol", "outputs": [], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [symbol_]);
    };
    Coin.prototype.symbol = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.totalSupply = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    Coin.prototype.transfer = function (dst, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [dst, amount]);
    };
    Coin.prototype.transferFrom = function (src, dst, amount) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [{ "internalType": "address", "name": "src", "type": "address" }, { "internalType": "address", "name": "dst", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" };
        return this.getTransactionRequest(abi, [src, dst, amount]);
    };
    Coin.prototype.version = function (multicall) {
        // prettier-ignore
        // @ts-ignore
        var abi = { "inputs": [], "name": "version", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" };
        return this.ethCallOrMulticall(abi, [], multicall);
    };
    return Coin;
}(geb_contract_base_1.BaseContractAPI));
exports.Coin = Coin;
