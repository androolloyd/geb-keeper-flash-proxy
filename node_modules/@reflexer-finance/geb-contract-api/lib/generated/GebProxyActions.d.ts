import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
export declare class GebProxyActions extends BaseContractAPI {
    allowHandler(manager: string, usr: string, ok: BigNumberish): TransactionRequest;
    allowSAFE(manager: string, safe: BigNumberish, usr: string, ok: BigNumberish): TransactionRequest;
    approveSAFEModification(obj: string, usr: string): TransactionRequest;
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    denySAFEModification(obj: string, usr: string): TransactionRequest;
    enterSystem(manager: string, src: string, safe: BigNumberish): TransactionRequest;
    ethJoin_join(ethValue: BigNumberish, apt: string, safe: string): TransactionRequest;
    exitETH(manager: string, ethJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    exitTokenCollateral(manager: string, collateralJoin: string, safe: BigNumberish, amt: BigNumberish): TransactionRequest;
    freeETH(manager: string, ethJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    freeTokenCollateral(manager: string, collateralJoin: string, safe: BigNumberish, amt: BigNumberish): TransactionRequest;
    generateDebt(manager: string, taxCollector: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    generateDebtAndProtectSAFE(manager: string, taxCollector: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish, liquidationEngine: string, saviour: string): TransactionRequest;
    lockETH(ethValue: BigNumberish, manager: string, ethJoin: string, safe: BigNumberish): TransactionRequest;
    lockETHAndGenerateDebt(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, safe: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    lockTokenCollateral(manager: string, collateralJoin: string, safe: BigNumberish, amt: BigNumberish, transferFrom: boolean): TransactionRequest;
    lockTokenCollateralAndGenerateDebt(manager: string, taxCollector: string, collateralJoin: string, coinJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean): TransactionRequest;
    lockTokenCollateralGenerateDebtAndProtectSAFE(manager: string, taxCollector: string, collateralJoin: string, coinJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean, liquidationEngine: string, saviour: string): TransactionRequest;
    makeCollateralBag(collateralJoin: string): TransactionRequest;
    modifySAFECollateralization(manager: string, safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    moveSAFE(manager: string, safeSrc: BigNumberish, safeDst: BigNumberish): TransactionRequest;
    openLockETHAndGenerateDebt(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, collateralType: BytesLike, deltaWad: BigNumberish): TransactionRequest;
    openLockETHGenerateDebtAndProtectSAFE(ethValue: BigNumberish, manager: string, taxCollector: string, ethJoin: string, coinJoin: string, collateralType: BytesLike, deltaWad: BigNumberish, liquidationEngine: string, saviour: string): TransactionRequest;
    openLockGNTAndGenerateDebt(manager: string, taxCollector: string, gntJoin: string, coinJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    openLockGNTGenerateDebtAndProtectSAFE(manager: string, taxCollector: string, gntJoin: string, coinJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, liquidationEngine: string, saviour: string): TransactionRequest;
    openLockTokenCollateralAndGenerateDebt(manager: string, taxCollector: string, collateralJoin: string, coinJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean): TransactionRequest;
    openLockTokenCollateralGenerateDebtAndProtectSAFE(manager: string, taxCollector: string, collateralJoin: string, coinJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean, liquidationEngine: string, saviour: string): TransactionRequest;
    openSAFE(manager: string, collateralType: BytesLike, usr: string): TransactionRequest;
    protectSAFE(manager: string, safe: BigNumberish, liquidationEngine: string, saviour: string): TransactionRequest;
    quitSystem(manager: string, safe: BigNumberish, dst: string): TransactionRequest;
    repayAllDebt(manager: string, coinJoin: string, safe: BigNumberish): TransactionRequest;
    repayAllDebtAndFreeETH(manager: string, ethJoin: string, coinJoin: string, safe: BigNumberish, collateralWad: BigNumberish): TransactionRequest;
    repayAllDebtAndFreeTokenCollateral(manager: string, collateralJoin: string, coinJoin: string, safe: BigNumberish, collateralAmount: BigNumberish): TransactionRequest;
    repayDebt(manager: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    repayDebtAndFreeETH(manager: string, ethJoin: string, coinJoin: string, safe: BigNumberish, collateralWad: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    repayDebtAndFreeTokenCollateral(manager: string, collateralJoin: string, coinJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    safeLockETH(ethValue: BigNumberish, manager: string, ethJoin: string, safe: BigNumberish, owner: string): TransactionRequest;
    safeLockTokenCollateral(manager: string, collateralJoin: string, safe: BigNumberish, amt: BigNumberish, transferFrom: boolean, owner: string): TransactionRequest;
    safeRepayAllDebt(manager: string, coinJoin: string, safe: BigNumberish, owner: string): TransactionRequest;
    safeRepayDebt(manager: string, coinJoin: string, safe: BigNumberish, wad: BigNumberish, owner: string): TransactionRequest;
    tokenCollateralJoin_join(apt: string, safe: string, amt: BigNumberish, transferFrom: boolean): TransactionRequest;
    transfer(collateral: string, dst: string, amt: BigNumberish): TransactionRequest;
    transferCollateral(manager: string, safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(manager: string, safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFEOwnership(manager: string, safe: BigNumberish, usr: string): TransactionRequest;
    transferSAFEOwnershipToProxy(proxyRegistry: string, manager: string, safe: BigNumberish, dst: string): TransactionRequest;
}
