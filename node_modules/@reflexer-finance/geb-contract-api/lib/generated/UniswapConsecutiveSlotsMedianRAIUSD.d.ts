import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class UniswapConsecutiveSlotsMedianRaiusd extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    baseUpdateCallerReward(): Promise<BigNumber>;
    baseUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    converterComputeAmountOut(timeElapsed: BigNumberish, amountIn: BigNumberish): Promise<BigNumber>;
    converterComputeAmountOut(timeElapsed: BigNumberish, amountIn: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    converterFeed(): Promise<string>;
    converterFeed(multicall: true): MulticallRequest<string>;
    converterFeedObservations(uinteger: BigNumberish): Promise<{
        timestamp: BigNumber;
        timeAdjustedPrice: BigNumber;
    }>;
    converterFeedObservations(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        timestamp: BigNumber;
        timeAdjustedPrice: BigNumber;
    }>;
    converterFeedScalingFactor(): Promise<BigNumber>;
    converterFeedScalingFactor(multicall: true): MulticallRequest<BigNumber>;
    converterPriceCumulative(): Promise<BigNumber>;
    converterPriceCumulative(multicall: true): MulticallRequest<BigNumber>;
    defaultAmountIn(): Promise<BigNumber>;
    defaultAmountIn(multicall: true): MulticallRequest<BigNumber>;
    denominationToken(): Promise<string>;
    denominationToken(multicall: true): MulticallRequest<string>;
    earliestObservationIndex(): Promise<BigNumber>;
    earliestObservationIndex(multicall: true): MulticallRequest<BigNumber>;
    getCallerReward(): Promise<BigNumber>;
    getCallerReward(multicall: true): MulticallRequest<BigNumber>;
    getObservationListLength(): Promise<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getObservationListLength(multicall: true): MulticallRequest<{
        0: BigNumber;
        1: BigNumber;
    }>;
    getResultWithValidity(): Promise<{
        0: BigNumber;
        1: boolean;
    }>;
    getResultWithValidity(multicall: true): MulticallRequest<{
        0: BigNumber;
        1: boolean;
    }>;
    granularity(): Promise<number>;
    granularity(multicall: true): MulticallRequest<number>;
    lastUpdateTime(): Promise<BigNumber>;
    lastUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    maxRewardIncreaseDelay(): Promise<BigNumber>;
    maxRewardIncreaseDelay(multicall: true): MulticallRequest<BigNumber>;
    maxUpdateCallerReward(): Promise<BigNumber>;
    maxUpdateCallerReward(multicall: true): MulticallRequest<BigNumber>;
    maxWindowSize(): Promise<BigNumber>;
    maxWindowSize(multicall: true): MulticallRequest<BigNumber>;
    modifyParameters__Bytes32Address(parameter: BytesLike, data: string): TransactionRequest;
    modifyParameters__Bytes32Uint256(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    perSecondCallerRewardIncrease(): Promise<BigNumber>;
    perSecondCallerRewardIncrease(multicall: true): MulticallRequest<BigNumber>;
    periodSize(): Promise<BigNumber>;
    periodSize(multicall: true): MulticallRequest<BigNumber>;
    read(): Promise<BigNumber>;
    read(multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    symbol(): Promise<string>;
    symbol(multicall: true): MulticallRequest<string>;
    targetToken(): Promise<string>;
    targetToken(multicall: true): MulticallRequest<string>;
    timeElapsedSinceFirstObservation(): Promise<BigNumber>;
    timeElapsedSinceFirstObservation(multicall: true): MulticallRequest<BigNumber>;
    treasury(): Promise<string>;
    treasury(multicall: true): MulticallRequest<string>;
    treasuryAllowance(): Promise<BigNumber>;
    treasuryAllowance(multicall: true): MulticallRequest<BigNumber>;
    uniswapComputeAmountOut(priceCumulativeStart: BigNumberish, priceCumulativeEnd: BigNumberish, timeElapsed: BigNumberish, amountIn: BigNumberish): Promise<BigNumber>;
    uniswapComputeAmountOut(priceCumulativeStart: BigNumberish, priceCumulativeEnd: BigNumberish, timeElapsed: BigNumberish, amountIn: BigNumberish, multicall: true): MulticallRequest<BigNumber>;
    uniswapFactory(): Promise<string>;
    uniswapFactory(multicall: true): MulticallRequest<string>;
    uniswapObservations(uinteger: BigNumberish): Promise<{
        timestamp: BigNumber;
        price0Cumulative: BigNumber;
        price1Cumulative: BigNumber;
    }>;
    uniswapObservations(uinteger: BigNumberish, multicall: true): MulticallRequest<{
        timestamp: BigNumber;
        price0Cumulative: BigNumber;
        price1Cumulative: BigNumber;
    }>;
    uniswapPair(): Promise<string>;
    uniswapPair(multicall: true): MulticallRequest<string>;
    updateResult(feeReceiver: string): TransactionRequest;
    updates(): Promise<BigNumber>;
    updates(multicall: true): MulticallRequest<BigNumber>;
    windowSize(): Promise<BigNumber>;
    windowSize(multicall: true): MulticallRequest<BigNumber>;
}
