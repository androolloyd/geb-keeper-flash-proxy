import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class Osm extends BaseContractAPI {
    addAuthorization(account: string): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    changeDelay(delay: BigNumberish): TransactionRequest;
    changePriceSource(priceSource_: string): TransactionRequest;
    getNextResultWithValidity(): Promise<{
        0: BigNumber;
        1: boolean;
    }>;
    getNextResultWithValidity(multicall: true): MulticallRequest<{
        0: BigNumber;
        1: boolean;
    }>;
    getResultWithValidity(): Promise<{
        0: BigNumber;
        1: boolean;
    }>;
    getResultWithValidity(multicall: true): MulticallRequest<{
        0: BigNumber;
        1: boolean;
    }>;
    lastUpdateTime(): Promise<BigNumber>;
    lastUpdateTime(multicall: true): MulticallRequest<BigNumber>;
    passedDelay(): Promise<boolean>;
    passedDelay(multicall: true): MulticallRequest<boolean>;
    priceSource(): Promise<string>;
    priceSource(multicall: true): MulticallRequest<string>;
    read(): Promise<BigNumber>;
    read(multicall: true): MulticallRequest<BigNumber>;
    removeAuthorization(account: string): TransactionRequest;
    restartValue(): TransactionRequest;
    start(): TransactionRequest;
    stop(): TransactionRequest;
    stopped(): Promise<BigNumber>;
    stopped(multicall: true): MulticallRequest<BigNumber>;
    updateDelay(): Promise<number>;
    updateDelay(multicall: true): MulticallRequest<number>;
    updateResult(): TransactionRequest;
}
