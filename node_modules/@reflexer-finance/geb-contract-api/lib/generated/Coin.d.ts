import { BaseContractAPI } from '@reflexer-finance/geb-contract-base';
import { MulticallRequest } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
export declare class Coin extends BaseContractAPI {
    DOMAIN_SEPARATOR(): Promise<string>;
    DOMAIN_SEPARATOR(multicall: true): MulticallRequest<string>;
    PERMIT_TYPEHASH(): Promise<string>;
    PERMIT_TYPEHASH(multicall: true): MulticallRequest<string>;
    addAuthorization(account: string): TransactionRequest;
    allowance(address1: string, address2: string): Promise<BigNumber>;
    allowance(address1: string, address2: string, multicall: true): MulticallRequest<BigNumber>;
    approve(usr: string, amount: BigNumberish): TransactionRequest;
    authorizedAccounts(address: string): Promise<BigNumber>;
    authorizedAccounts(address: string, multicall: true): MulticallRequest<BigNumber>;
    balanceOf(address: string): Promise<BigNumber>;
    balanceOf(address: string, multicall: true): MulticallRequest<BigNumber>;
    burn(usr: string, amount: BigNumberish): TransactionRequest;
    chainId(): Promise<BigNumber>;
    chainId(multicall: true): MulticallRequest<BigNumber>;
    changeData(): Promise<BigNumber>;
    changeData(multicall: true): MulticallRequest<BigNumber>;
    decimals(): Promise<number>;
    decimals(multicall: true): MulticallRequest<number>;
    mint(usr: string, amount: BigNumberish): TransactionRequest;
    modifyParameters(parameter: BytesLike, data: BigNumberish): TransactionRequest;
    move(src: string, dst: string, amount: BigNumberish): TransactionRequest;
    name(): Promise<string>;
    name(multicall: true): MulticallRequest<string>;
    nonces(address: string): Promise<BigNumber>;
    nonces(address: string, multicall: true): MulticallRequest<BigNumber>;
    permit(holder: string, spender: string, nonce: BigNumberish, expiry: BigNumberish, allowed: boolean, v: BigNumberish, r: BytesLike, s: BytesLike): TransactionRequest;
    pull(usr: string, amount: BigNumberish): TransactionRequest;
    push(usr: string, amount: BigNumberish): TransactionRequest;
    removeAuthorization(account: string): TransactionRequest;
    setName(name_: string): TransactionRequest;
    setSymbol(symbol_: string): TransactionRequest;
    symbol(): Promise<string>;
    symbol(multicall: true): MulticallRequest<string>;
    totalSupply(): Promise<BigNumber>;
    totalSupply(multicall: true): MulticallRequest<BigNumber>;
    transfer(dst: string, amount: BigNumberish): TransactionRequest;
    transferFrom(src: string, dst: string, amount: BigNumberish): TransactionRequest;
    version(): Promise<string>;
    version(multicall: true): MulticallRequest<string>;
}
