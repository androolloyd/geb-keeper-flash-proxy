"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Safe = void 0;
var bignumber_1 = require("@ethersproject/bignumber");
var utils_1 = require("../utils");
/**
 * This object represents a GEB safe. It has the entire SAFE state and provides helper functions to calculate its liquidation price, collateralization ratio etc.
 */
var Safe = /** @class */ (function () {
    function Safe(contracts, 
    /**
     * SAFE handler in the SAFE Engine
     */
    handler, 
    /**
     * Amount of debt generated by the SAFE (WAD)
     */
    debt, 
    /**
     * Amount of collateral locked in the SAFE (WAD)
     */
    collateral, 
    /**
     * SAFE collateral type
     */
    collateralType, 
    /**
     * Whether the safe was opened using a SAFE manager
     */
    isManaged, 
    /**
     * Safe incremental ID, only for managed safes
     */
    safeId) {
        this.contracts = contracts;
        this.handler = handler;
        this.debt = debt;
        this.collateral = collateral;
        this.collateralType = collateralType;
        this.isManaged = isManaged;
        this.safeId = safeId;
    }
    /**
     * Ratio used to calculate the amount of debt that can be drawn. Returns null is ratio is +Infinity. !! Uses unsafe division that can lead to precision loss.
     * @returns Promise<FixedNumber> CRatio
     */
    Safe.prototype.getCRatio = function () {
        return __awaiter(this, void 0, void 0, function () {
            var liquidationCRatio, _a, accumulatedRate, safetyPrice;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.collateral.isZero()) {
                            return [2 /*return*/, bignumber_1.FixedNumber.from('0')];
                        }
                        if (this.debt.isZero()) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.contracts.oracleRelayer.collateralTypes(this.collateralType)];
                    case 1:
                        liquidationCRatio = (_b.sent()).liquidationCRatio;
                        return [4 /*yield*/, this.contracts.safeEngine.collateralTypes(this.collateralType)];
                    case 2:
                        _a = _b.sent(), accumulatedRate = _a.accumulatedRate, safetyPrice = _a.safetyPrice;
                        return [2 /*return*/, bignumber_1.FixedNumber.from(this.collateral.mul(safetyPrice).mul(liquidationCRatio).div(utils_1.RAY)).divUnsafe(bignumber_1.FixedNumber.from(this.debt.mul(accumulatedRate)))];
                }
            });
        });
    };
    /**
     * Price at which the SAFE will get liquidated.
     * @returns <FixedNumber> Liquidation price
     */
    Safe.prototype.liquidationPrice = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accumulatedRate, redemptionPrice, liqCRatio, numerator;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.collateral.isZero()) {
                            return [2 /*return*/, bignumber_1.FixedNumber.from('0')];
                        }
                        if (this.debt.isZero()) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.contracts.safeEngine.collateralTypes(this.collateralType)];
                    case 1:
                        accumulatedRate = (_a.sent()).accumulatedRate;
                        return [4 /*yield*/, this.contracts.oracleRelayer.redemptionPrice_readOnly()];
                    case 2:
                        redemptionPrice = _a.sent();
                        return [4 /*yield*/, this.contracts.oracleRelayer.collateralTypes(this.collateralType)];
                    case 3:
                        liqCRatio = (_a.sent()).liquidationCRatio;
                        numerator = this.debt
                            .mul(accumulatedRate)
                            .mul(redemptionPrice)
                            .mul(liqCRatio)
                            .div(utils_1.RAY.pow(3)) // Make it a WAD
                        ;
                        return [2 /*return*/, bignumber_1.FixedNumber.from(numerator).divUnsafe(bignumber_1.FixedNumber.from(this.collateral))];
                }
            });
        });
    };
    return Safe;
}());
exports.Safe = Safe;
//# sourceMappingURL=safe.js.map