"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GebProxyActionsGlobalSettlement = void 0;
var bignumber_1 = require("@ethersproject/bignumber");
var geb_contract_base_1 = require("@reflexer-finance/geb-contract-base");
var geb_contract_api_1 = require("@reflexer-finance/geb-contract-api");
/**
 * Convenience class used to call functions from
 * [GebProxyActionsGlobalSettlement](https://github.com/reflexer-labs/geb-proxy-actions/blob/master/src/GebProxyActions.sol)
 * using a proxy registered in the [GebProxyRegistry](https://github.com/reflexer-labs/geb-proxy-registry/blob/master/src/GebProxyRegistry.sol).
 * Useful only during Global Settlement in order for users to redeem collateral. See the
 * [[https://docs.reflexer.finance/geb-js/geb-js-global-settlement-guide | Global Settlement Guide]].
 *
 */
var GebProxyActionsGlobalSettlement = /** @class */ (function (_super) {
    __extends(GebProxyActionsGlobalSettlement, _super);
    function GebProxyActionsGlobalSettlement(
    /**
     * Address of the underlying proxy.
     */
    proxyAddress, network, chainProvider) {
        var _this = _super.call(this, geb_contract_base_1.getAddressList(network).PROXY_ACTIONS, chainProvider) || this;
        _this.proxyAddress = proxyAddress;
        _this.addressList = geb_contract_base_1.getAddressList(network);
        _this.proxy = new geb_contract_api_1.DsProxy(proxyAddress, _this.chainProvider);
        _this.proxyActionAddress = _this.addressList.PROXY_ACTIONS;
        _this.address = proxyAddress;
        return _this;
    }
    // Override getTransactionRequest to use proxy
    GebProxyActionsGlobalSettlement.prototype.getTransactionRequest = function (abiFragment, params, ethValue) {
        var data = this.chainProvider.encodeFunctionData(params, abiFragment);
        if (!ethValue) {
            ethValue = bignumber_1.BigNumber.from('0');
        }
        return this.proxy.execute1(ethValue, this.proxyActionAddress, data);
    };
    GebProxyActionsGlobalSettlement.prototype.coinJoin_join = function (apt, safeHandler, wad) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.coinJoin_join.call(this, apt, safeHandler, wad);
    };
    GebProxyActionsGlobalSettlement.prototype.freeETH = function (ethJoin, globalSettlement, safe) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.freeETH.call(this, this.addressList.SAFE_MANAGER, ethJoin, globalSettlement, safe);
    };
    GebProxyActionsGlobalSettlement.prototype.freeTokenCollateral = function (collateralJoin, safe) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.freeTokenCollateral.call(this, this.addressList.SAFE_MANAGER, collateralJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, safe);
    };
    GebProxyActionsGlobalSettlement.prototype.prepareCoinsForRedeeming = function (wad) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.prepareCoinsForRedeeming.call(this, this.addressList.GEB_COIN_JOIN, this.addressList.GEB_GLOBAL_SETTLEMENT, wad);
    };
    GebProxyActionsGlobalSettlement.prototype.redeemETH = function (ethJoin, collateralType, wad) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.redeemETH.call(this, ethJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, collateralType, wad);
    };
    GebProxyActionsGlobalSettlement.prototype.redeemTokenCollateral = function (collateralJoin, collateralType, wad) {
        // prettier-ignore
        // @ts-ignore
        return _super.prototype.redeemTokenCollateral.call(this, collateralJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, collateralType, wad);
    };
    return GebProxyActionsGlobalSettlement;
}(geb_contract_api_1.GebProxyActionsGlobalSettlement));
exports.GebProxyActionsGlobalSettlement = GebProxyActionsGlobalSettlement;
//# sourceMappingURL=proxy-action-global-settlement.js.map