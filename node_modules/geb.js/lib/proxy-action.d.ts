import { GebProviderInterface, GebDeployment } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { DsProxy } from '@reflexer-finance/geb-contract-api';
/**
 * Convenience class to call functions from [GebProxyActions](https://github.com/reflexer-labs/geb-proxy-actions/blob/master/src/GebProxyActions.sol) through a proxy contract registered in the [GebProxyRegistry](https://github.com/reflexer-labs/geb-proxy-registry/blob/master/src/GebProxyRegistry.sol). These actions bundle multiple actions in one (e.g: open a safe + lock some ETH + draw some RAI).
 */
export declare class GebProxyActions {
    /**
     * Address of the underlying proxy
     */
    proxyAddress: string;
    private chainProvider;
    /**
     * Underlying proxy object. Can be use to make custom calls to the proxy using `proxy.execute()` function.
     * For the details of each function
     */
    proxy: DsProxy;
    /**
     * Address of the base proxy action contract.
     */
    proxyActionCoreAddress: string;
    /**
     * Address of the proxy action contract for global settlement.
     */
    proxyActionGlobalSettlementAddress: string;
    /**
     * Address of the proxy action contract for uniswap LP share staking.
     */
    proxyActionIncentiveAddress: string;
    /**
     * Address of the proxy action contract for leveraged with flash loans operations.
     */
    proxyActionLeverageAddress: string;
    private addressList;
    private proxyActionCore;
    private proxyActionGlobalSettlement;
    private proxyActionIncentive;
    private proxyActionLeverage;
    constructor(
    /**
     * Address of the underlying proxy
     */
    proxyAddress: string, network: GebDeployment, chainProvider: GebProviderInterface);
    private getProxiedTransactionRequest;
    allowSAFE(safe: BigNumberish, usr: string, ok: BigNumberish): TransactionRequest;
    approveSAFEModification(obj: string, usr: string): TransactionRequest;
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    denySAFEModification(obj: string, usr: string): TransactionRequest;
    enterSystem(src: string, safe: BigNumberish): TransactionRequest;
    ethJoin_join(ethValue: BigNumberish, apt: string, safe: string): TransactionRequest;
    exitETH(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    exitTokenCollateral(collateralJoin: string, safe: BigNumberish, amt: BigNumberish): TransactionRequest;
    freeETH(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    freeTokenCollateral(collateralJoin: string, safe: BigNumberish, amt: BigNumberish): TransactionRequest;
    generateDebt(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    generateDebtAndProtectSAFE(safe: BigNumberish, wad: BigNumberish, saviour: string): TransactionRequest;
    lockETH(ethValue: BigNumberish, safe: BigNumberish): TransactionRequest;
    lockETHAndGenerateDebt(ethValue: BigNumberish, safe: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    lockTokenCollateral(collateralJoin: string, safe: BigNumberish, amt: BigNumberish, transferFrom: boolean): TransactionRequest;
    lockTokenCollateralAndGenerateDebt(collateralJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean): TransactionRequest;
    lockTokenCollateralGenerateDebtAndProtectSAFE(collateralJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean, saviour: string): TransactionRequest;
    makeCollateralBag(collateralJoin: string): TransactionRequest;
    modifySAFECollateralization(safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    moveSAFE(safeSrc: BigNumberish, safeDst: BigNumberish): TransactionRequest;
    openLockETHAndGenerateDebt(ethValue: BigNumberish, collateralType: BytesLike, deltaWad: BigNumberish): TransactionRequest;
    openLockETHGenerateDebtAndProtectSAFE(ethValue: BigNumberish, collateralType: BytesLike, deltaWad: BigNumberish, saviour: string): TransactionRequest;
    openLockGNTAndGenerateDebt(gntJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    openLockGNTGenerateDebtAndProtectSAFE(gntJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, saviour: string): TransactionRequest;
    openLockTokenCollateralAndGenerateDebt(collateralJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean): TransactionRequest;
    openLockTokenCollateralGenerateDebtAndProtectSAFE(collateralJoin: string, collateralType: BytesLike, collateralAmount: BigNumberish, deltaWad: BigNumberish, transferFrom: boolean, saviour: string): TransactionRequest;
    openSAFE(collateralType: BytesLike, usr: string): TransactionRequest;
    protectSAFE(safe: BigNumberish, saviour: string): TransactionRequest;
    quitSystem(safe: BigNumberish, dst: string): TransactionRequest;
    repayAllDebt(safe: BigNumberish): TransactionRequest;
    repayAllDebtAndFreeETH(safe: BigNumberish, collateralWad: BigNumberish): TransactionRequest;
    repayAllDebtAndFreeTokenCollateral(collateralJoin: string, safe: BigNumberish, collateralAmount: BigNumberish): TransactionRequest;
    repayDebt(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    repayDebtAndFreeETH(safe: BigNumberish, collateralWad: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    repayDebtAndFreeTokenCollateral(collateralJoin: string, safe: BigNumberish, collateralAmount: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    safeLockETH(ethValue: BigNumberish, safe: BigNumberish, owner: string): TransactionRequest;
    safeLockTokenCollateral(collateralJoin: string, safe: BigNumberish, amt: BigNumberish, transferFrom: boolean, owner: string): TransactionRequest;
    safeRepayAllDebt(safe: BigNumberish, owner: string): TransactionRequest;
    safeRepayDebt(safe: BigNumberish, wad: BigNumberish, owner: string): TransactionRequest;
    tokenCollateralJoin_join(apt: string, safe: string, amt: BigNumberish, transferFrom: boolean): TransactionRequest;
    transfer(collateral: string, dst: string, amt: BigNumberish): TransactionRequest;
    transferCollateral(safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFEOwnership(safe: BigNumberish, usr: string): TransactionRequest;
    transferSAFEOwnershipToProxy(safe: BigNumberish, dst: string): TransactionRequest;
    prepareCoinsForRedeemingGlobalSettlement(wad: BigNumberish): TransactionRequest;
    freeTokenCollateralGlobalSettlement(collateralJoin: string, safe: BigNumberish): TransactionRequest;
    redeemETHGlobalSettlement(ethJoin: string, collateralType: BytesLike, wad: BigNumberish): TransactionRequest;
    redeemTokenCollateralGlobalSettlement(collateralJoin: string, collateralType: BytesLike, wad: BigNumberish): TransactionRequest;
    exitAndRemoveLiquidity(minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    exitMine(incentives: string): TransactionRequest;
    exitRemoveLiquidityRepayDebt(safe: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    exitRemoveLiquidityRepayDebtFreeETH(safe: BigNumberish, ethToFree: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    generateDebtAndProvideLiquidityStake(ethValue: BigNumberish, safe: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    generateDebtAndProvideLiquidityUniswap(ethValue: BigNumberish, safe: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    getLockedReward(campaignId: BigNumberish): TransactionRequest;
    harvestReward(campaignId: BigNumberish): TransactionRequest;
    lockETHGenerateDebtProvideLiquidityStake(ethValue: BigNumberish, safe: BigNumberish, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    lockETHGenerateDebtProvideLiquidityUniswap(ethValue: BigNumberish, safe: BigNumberish, deltaWad: BigNumberish, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    openLockETHGenerateDebtProvideLiquidityStake(ethValue: BigNumberish, deltaWad: BigNumberish, collateralType: string, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    openLockETHGenerateDebtProvideLiquidityUniswap(ethValue: BigNumberish, deltaWad: BigNumberish, collateralType: string, liquidityWad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    provideLiquidityUniswap(ethValue: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    removeLiquidityUniswap(systemCoin: string, value: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    stakeInMine(wad: BigNumberish): TransactionRequest;
    withdrawAndHarvest(value: BigNumberish, campaignId: BigNumberish): TransactionRequest;
    withdrawAndRemoveLiquidity(value: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawFromMine(value: BigNumberish): TransactionRequest;
    withdrawRemoveLiquidityRepayDebt(safe: BigNumberish, value: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawRemoveLiquidityRepayDebtFreeETH(safe: BigNumberish, valueToWithdraw: BigNumberish, ethToFree: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    getRewards(campaignId: BigNumberish): TransactionRequest;
    provideLiquidityStake(ethValue: BigNumberish, wad: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    withdrawHarvestRemoveLiquidity(amount: BigNumberish, campaignId: BigNumberish, minTokenAmounts: [BigNumberish, BigNumberish]): TransactionRequest;
    flashDeleverage(uniswapV2Pair: string, callbackProxy: string, safe: BigNumberish): TransactionRequest;
    flashDeleverageFreeETH(uniswapV2Pair: string, callbackProxy: string, safe: BigNumberish, amountToFree: BigNumberish): TransactionRequest;
    flashLeverage(uniswapV2Pair: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    lockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    openLockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, callbackProxy: string, leverage: BigNumberish): TransactionRequest;
    uniswapV2Call(_sender: string, _amount0: BigNumberish, _amount1: BigNumberish, _data: BytesLike): TransactionRequest;
}
