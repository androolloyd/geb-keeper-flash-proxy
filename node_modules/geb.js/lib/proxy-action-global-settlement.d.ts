import { BigNumber, BigNumberish } from '@ethersproject/bignumber';
import { BytesLike } from '@ethersproject/bytes';
import { AbiDefinition, GebDeployment, GebProviderInterface, Inputs, TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { DsProxy, GebProxyActionsGlobalSettlement as GebProxyActionsGlobalSettlementGenerated } from '@reflexer-finance/geb-contract-api';
/**
 * Convenience class used to call functions from
 * [GebProxyActionsGlobalSettlement](https://github.com/reflexer-labs/geb-proxy-actions/blob/master/src/GebProxyActions.sol)
 * using a proxy registered in the [GebProxyRegistry](https://github.com/reflexer-labs/geb-proxy-registry/blob/master/src/GebProxyRegistry.sol).
 * Useful only during Global Settlement in order for users to redeem collateral. See the
 * [[https://docs.reflexer.finance/geb-js/geb-js-global-settlement-guide | Global Settlement Guide]].
 *
 */
export declare class GebProxyActionsGlobalSettlement extends GebProxyActionsGlobalSettlementGenerated {
    /**
     * Address of the underlying proxy.
     */
    proxyAddress: string;
    /**
     * Underlying proxy object. Can be used to make custom calls to the proxy using `proxy.execute()` .
     * For the details of each function
     */
    proxy: DsProxy;
    /**
     * Address of the proxy actions global settlement contract.
     */
    proxyActionAddress: string;
    private addressList;
    constructor(
    /**
     * Address of the underlying proxy.
     */
    proxyAddress: string, network: GebDeployment, chainProvider: GebProviderInterface);
    protected getTransactionRequest(abiFragment: AbiDefinition, params: Inputs, ethValue?: BigNumber): TransactionRequest;
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    freeETH(ethJoin: string, globalSettlement: string, safe: BigNumberish): TransactionRequest;
    freeTokenCollateral(collateralJoin: string, safe: BigNumberish): TransactionRequest;
    prepareCoinsForRedeeming(wad: BigNumberish): TransactionRequest;
    redeemETH(ethJoin: string, collateralType: BytesLike, wad: BigNumberish): TransactionRequest;
    redeemTokenCollateral(collateralJoin: string, collateralType: BytesLike, wad: BigNumberish): TransactionRequest;
}
