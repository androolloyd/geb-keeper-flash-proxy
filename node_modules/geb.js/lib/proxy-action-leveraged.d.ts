import { GebProviderInterface, AbiDefinition, Inputs, GebDeployment } from '@reflexer-finance/geb-contract-base';
import { TransactionRequest } from '@reflexer-finance/geb-contract-base';
import { BytesLike } from '@ethersproject/bytes';
import { BigNumberish } from '@ethersproject/bignumber';
import { BigNumber } from '@ethersproject/bignumber';
import { DsProxy, GebProxyLeverageActions as GebProxyLeverageActionsGenerated } from '@reflexer-finance/geb-contract-api';
export declare class GebProxyLeverageActions extends GebProxyLeverageActionsGenerated {
    /**
     * Address of the underlying proxy
     */
    proxyAddress: string;
    proxy: DsProxy;
    /**
     * Address of the proxy action contract.
     */
    proxyActionAddress: string;
    private addressList;
    constructor(
    /**
     * Address of the underlying proxy
     */
    proxyAddress: string, network: GebDeployment, chainProvider: GebProviderInterface);
    protected getTransactionRequest(abiFragment: AbiDefinition, params: Inputs, ethValue?: BigNumber): TransactionRequest;
    allowHandler(usr: string, ok: BigNumberish): TransactionRequest;
    allowSAFE(safe: BigNumberish, usr: string, ok: BigNumberish): TransactionRequest;
    approveSAFEModification(safeEngine: string, usr: string): TransactionRequest;
    coinJoin_join(apt: string, safeHandler: string, wad: BigNumberish): TransactionRequest;
    denySAFEModification(safeEngine: string, usr: string): TransactionRequest;
    enterSystem(src: string, safe: BigNumberish): TransactionRequest;
    ethJoin_join1(ethValue: BigNumberish, apt: string, safe: string): TransactionRequest;
    ethJoin_join2(ethValue: BigNumberish, apt: string, safe: string, value: BigNumberish): TransactionRequest;
    exitETH(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    flashDeleverage(uniswapV2Pair: string, weth: string, callbackProxy: string, safe: BigNumberish): TransactionRequest;
    flashDeleverageFreeETH(uniswapV2Pair: string, weth: string, callbackProxy: string, safe: BigNumberish, amountToFree: BigNumberish): TransactionRequest;
    flashLeverage(uniswapV2Pair: string, weth: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    freeETH(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    generateDebt(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    lockETH(ethValue: BigNumberish, safe: BigNumberish): TransactionRequest;
    lockETHAndGenerateDebt(ethValue: BigNumberish, safe: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    lockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, weth: string, callbackProxy: string, safe: BigNumberish, leverage: BigNumberish): TransactionRequest;
    modifySAFECollateralization(safe: BigNumberish, deltaCollateral: BigNumberish, deltaDebt: BigNumberish): TransactionRequest;
    moveSAFE(safeSrc: BigNumberish, safeDst: BigNumberish): TransactionRequest;
    openLockETHAndGenerateDebt(ethValue: BigNumberish, collateralType: BytesLike, deltaWad: BigNumberish): TransactionRequest;
    openLockETHLeverage(ethValue: BigNumberish, uniswapV2Pair: string, weth: string, callbackProxy: string, leverage: BigNumberish): TransactionRequest;
    openSAFE(collateralType: BytesLike, usr: string): TransactionRequest;
    quitSystem(safe: BigNumberish, dst: string): TransactionRequest;
    repayDebt(safe: BigNumberish, wad: BigNumberish): TransactionRequest;
    repayDebtAndFreeETH(safe: BigNumberish, collateralWad: BigNumberish, deltaWad: BigNumberish): TransactionRequest;
    transfer(collateral: string, dst: string, amt: BigNumberish): TransactionRequest;
    transferCollateral(safe: BigNumberish, dst: string, wad: BigNumberish): TransactionRequest;
    transferInternalCoins(safe: BigNumberish, dst: string, rad: BigNumberish): TransactionRequest;
    transferSAFEOwnership(safe: BigNumberish, usr: string): TransactionRequest;
    transferSAFEOwnershipToProxy(safe: BigNumberish, dst: string): TransactionRequest;
    uniswapV2Call(_sender: string, _amount0: BigNumberish, _amount1: BigNumberish, _data: BytesLike): TransactionRequest;
}
