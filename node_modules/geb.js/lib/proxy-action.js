"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GebProxyActions = void 0;
var geb_contract_base_1 = require("@reflexer-finance/geb-contract-base");
var bignumber_1 = require("@ethersproject/bignumber");
var geb_contract_api_1 = require("@reflexer-finance/geb-contract-api");
var utils_1 = require("./utils");
/**
 * Convenience class to call functions from [GebProxyActions](https://github.com/reflexer-labs/geb-proxy-actions/blob/master/src/GebProxyActions.sol) through a proxy contract registered in the [GebProxyRegistry](https://github.com/reflexer-labs/geb-proxy-registry/blob/master/src/GebProxyRegistry.sol). These actions bundle multiple actions in one (e.g: open a safe + lock some ETH + draw some RAI).
 */
var GebProxyActions = /** @class */ (function () {
    function GebProxyActions(
    /**
     * Address of the underlying proxy
     */
    proxyAddress, network, chainProvider) {
        this.proxyAddress = proxyAddress;
        this.chainProvider = chainProvider;
        this.addressList = geb_contract_base_1.getAddressList(network);
        this.proxy = new geb_contract_api_1.DsProxy(proxyAddress, this.chainProvider);
        // Set proxy action contract addresses
        this.proxyActionCoreAddress = this.addressList.PROXY_ACTIONS;
        this.proxyActionGlobalSettlementAddress = this.addressList.PROXY_ACTIONS_GLOBAL_SETTLEMENT;
        this.proxyActionIncentiveAddress = this.addressList.INCENTIVE_PROXY_ACTIONS;
        this.proxyActionLeverageAddress = this.addressList.LEVERAGE_PROXY_ACTION;
        // Proxy contract APIs
        this.proxyActionCore = new geb_contract_api_1.GebProxyActions(this.proxyActionCoreAddress, this.chainProvider);
        this.proxyActionGlobalSettlement = new geb_contract_api_1.GebProxyActionsGlobalSettlement(this.proxyActionGlobalSettlementAddress, this.chainProvider);
        this.proxyActionIncentive = new geb_contract_api_1.GebProxyIncentivesActions(this.proxyActionIncentiveAddress, this.chainProvider);
        this.proxyActionLeverage = new geb_contract_api_1.GebProxyLeverageActions(this.proxyActionLeverageAddress, this.chainProvider);
    }
    GebProxyActions.prototype.getProxiedTransactionRequest = function (tx) {
        var ethValue = tx.value;
        if (!ethValue) {
            ethValue = bignumber_1.BigNumber.from('0');
        }
        if (tx.to === utils_1.NULL_ADDRESS) {
            throw Error('This proxy action is not supported on this network');
        }
        return this.proxy.execute__AddressBytes(ethValue, tx.to, tx.data);
    };
    // ==== Proxy Action Core ====
    GebProxyActions.prototype.allowSAFE = function (safe, usr, ok) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.allowSAFE(this.addressList.SAFE_MANAGER, safe, usr, ok));
    };
    GebProxyActions.prototype.approveSAFEModification = function (obj, usr) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.approveSAFEModification(obj, usr));
    };
    GebProxyActions.prototype.coinJoin_join = function (apt, safeHandler, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.coinJoin_join(apt, safeHandler, wad));
    };
    GebProxyActions.prototype.denySAFEModification = function (obj, usr) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.denySAFEModification(obj, usr));
    };
    GebProxyActions.prototype.enterSystem = function (src, safe) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.enterSystem(this.addressList.SAFE_MANAGER, src, safe));
    };
    GebProxyActions.prototype.ethJoin_join = function (ethValue, apt, safe) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.ethJoin_join(bignumber_1.BigNumber.from(ethValue), apt, safe));
    };
    GebProxyActions.prototype.exitETH = function (safe, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.exitETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, safe, wad));
    };
    GebProxyActions.prototype.exitTokenCollateral = function (collateralJoin, safe, amt) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.exitTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, safe, amt));
    };
    GebProxyActions.prototype.freeETH = function (safe, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.freeETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, safe, wad));
    };
    GebProxyActions.prototype.freeTokenCollateral = function (collateralJoin, safe, amt) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.freeTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, safe, amt));
    };
    GebProxyActions.prototype.generateDebt = function (safe, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.generateDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, safe, wad));
    };
    GebProxyActions.prototype.generateDebtAndProtectSAFE = function (safe, wad, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.generateDebtAndProtectSAFE(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, safe, wad, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.lockETH = function (ethValue, safe) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.lockETH(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, safe));
    };
    GebProxyActions.prototype.lockETHAndGenerateDebt = function (ethValue, safe, deltaWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.lockETHAndGenerateDebt(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, safe, deltaWad));
    };
    GebProxyActions.prototype.lockTokenCollateral = function (collateralJoin, safe, amt, transferFrom) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.lockTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, safe, amt, transferFrom));
    };
    GebProxyActions.prototype.lockTokenCollateralAndGenerateDebt = function (collateralJoin, safe, collateralAmount, deltaWad, transferFrom) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.lockTokenCollateralAndGenerateDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, collateralJoin, this.addressList.GEB_COIN_JOIN, safe, collateralAmount, deltaWad, transferFrom));
    };
    GebProxyActions.prototype.lockTokenCollateralGenerateDebtAndProtectSAFE = function (collateralJoin, safe, collateralAmount, deltaWad, transferFrom, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.lockTokenCollateralGenerateDebtAndProtectSAFE(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, collateralJoin, this.addressList.GEB_COIN_JOIN, safe, collateralAmount, deltaWad, transferFrom, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.makeCollateralBag = function (collateralJoin) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.makeCollateralBag(collateralJoin));
    };
    GebProxyActions.prototype.modifySAFECollateralization = function (safe, deltaCollateral, deltaDebt) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.modifySAFECollateralization(this.addressList.SAFE_MANAGER, safe, deltaCollateral, deltaDebt));
    };
    GebProxyActions.prototype.moveSAFE = function (safeSrc, safeDst) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.moveSAFE(this.addressList.SAFE_MANAGER, safeSrc, safeDst));
    };
    GebProxyActions.prototype.openLockETHAndGenerateDebt = function (ethValue, collateralType, deltaWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockETHAndGenerateDebt(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, collateralType, deltaWad));
    };
    GebProxyActions.prototype.openLockETHGenerateDebtAndProtectSAFE = function (ethValue, collateralType, deltaWad, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockETHGenerateDebtAndProtectSAFE(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, collateralType, deltaWad, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.openLockGNTAndGenerateDebt = function (gntJoin, collateralType, collateralAmount, deltaWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockGNTAndGenerateDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, gntJoin, this.addressList.GEB_COIN_JOIN, collateralType, collateralAmount, deltaWad));
    };
    GebProxyActions.prototype.openLockGNTGenerateDebtAndProtectSAFE = function (gntJoin, collateralType, collateralAmount, deltaWad, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockGNTGenerateDebtAndProtectSAFE(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, gntJoin, this.addressList.GEB_COIN_JOIN, collateralType, collateralAmount, deltaWad, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.openLockTokenCollateralAndGenerateDebt = function (collateralJoin, collateralType, collateralAmount, deltaWad, transferFrom) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockTokenCollateralAndGenerateDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, collateralJoin, this.addressList.GEB_COIN_JOIN, collateralType, collateralAmount, deltaWad, transferFrom));
    };
    GebProxyActions.prototype.openLockTokenCollateralGenerateDebtAndProtectSAFE = function (collateralJoin, collateralType, collateralAmount, deltaWad, transferFrom, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openLockTokenCollateralGenerateDebtAndProtectSAFE(this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, collateralJoin, this.addressList.GEB_COIN_JOIN, collateralType, collateralAmount, deltaWad, transferFrom, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.openSAFE = function (collateralType, usr) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.openSAFE(this.addressList.SAFE_MANAGER, collateralType, usr));
    };
    GebProxyActions.prototype.protectSAFE = function (safe, saviour) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.protectSAFE(this.addressList.SAFE_MANAGER, safe, this.addressList.GEB_LIQUIDATION_ENGINE, saviour));
    };
    GebProxyActions.prototype.quitSystem = function (safe, dst) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.quitSystem(this.addressList.SAFE_MANAGER, safe, dst));
    };
    GebProxyActions.prototype.repayAllDebt = function (safe) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayAllDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe));
    };
    GebProxyActions.prototype.repayAllDebtAndFreeETH = function (safe, collateralWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayAllDebtAndFreeETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, safe, collateralWad));
    };
    GebProxyActions.prototype.repayAllDebtAndFreeTokenCollateral = function (collateralJoin, safe, collateralAmount) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayAllDebtAndFreeTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, this.addressList.GEB_COIN_JOIN, safe, collateralAmount));
    };
    GebProxyActions.prototype.repayDebt = function (safe, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe, wad));
    };
    GebProxyActions.prototype.repayDebtAndFreeETH = function (safe, collateralWad, deltaWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayDebtAndFreeETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, safe, collateralWad, deltaWad));
    };
    GebProxyActions.prototype.repayDebtAndFreeTokenCollateral = function (collateralJoin, safe, collateralAmount, deltaWad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.repayDebtAndFreeTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, this.addressList.GEB_COIN_JOIN, safe, collateralAmount, deltaWad));
    };
    GebProxyActions.prototype.safeLockETH = function (ethValue, safe, owner) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.safeLockETH(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, safe, owner));
    };
    GebProxyActions.prototype.safeLockTokenCollateral = function (collateralJoin, safe, amt, transferFrom, owner) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.safeLockTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, safe, amt, transferFrom, owner));
    };
    GebProxyActions.prototype.safeRepayAllDebt = function (safe, owner) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.safeRepayAllDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe, owner));
    };
    GebProxyActions.prototype.safeRepayDebt = function (safe, wad, owner) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.safeRepayDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe, wad, owner));
    };
    GebProxyActions.prototype.tokenCollateralJoin_join = function (apt, safe, amt, transferFrom) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.tokenCollateralJoin_join(apt, safe, amt, transferFrom));
    };
    GebProxyActions.prototype.transfer = function (collateral, dst, amt) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.transfer(collateral, dst, amt));
    };
    GebProxyActions.prototype.transferCollateral = function (safe, dst, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.transferCollateral(this.addressList.SAFE_MANAGER, safe, dst, wad));
    };
    GebProxyActions.prototype.transferInternalCoins = function (safe, dst, rad) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.transferInternalCoins(this.addressList.SAFE_MANAGER, safe, dst, rad));
    };
    GebProxyActions.prototype.transferSAFEOwnership = function (safe, usr) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.transferSAFEOwnership(this.addressList.SAFE_MANAGER, safe, usr));
    };
    GebProxyActions.prototype.transferSAFEOwnershipToProxy = function (safe, dst) {
        return this.getProxiedTransactionRequest(this.proxyActionCore.transferSAFEOwnershipToProxy(this.addressList.PROXY_REGISTRY, this.addressList.SAFE_MANAGER, safe, dst));
    };
    // ==== Proxy Actions Global Settlement ====
    GebProxyActions.prototype.prepareCoinsForRedeemingGlobalSettlement = function (wad) {
        return this.getProxiedTransactionRequest(this.proxyActionGlobalSettlement.prepareCoinsForRedeeming(this.addressList.GEB_COIN_JOIN, this.addressList.GEB_GLOBAL_SETTLEMENT, wad));
    };
    GebProxyActions.prototype.freeTokenCollateralGlobalSettlement = function (collateralJoin, safe) {
        return this.getProxiedTransactionRequest(this.proxyActionGlobalSettlement.freeTokenCollateral(this.addressList.SAFE_MANAGER, collateralJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, safe));
    };
    GebProxyActions.prototype.redeemETHGlobalSettlement = function (ethJoin, collateralType, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionGlobalSettlement.redeemETH(ethJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, collateralType, wad));
    };
    GebProxyActions.prototype.redeemTokenCollateralGlobalSettlement = function (collateralJoin, collateralType, wad) {
        return this.getProxiedTransactionRequest(this.proxyActionGlobalSettlement.redeemTokenCollateral(collateralJoin, this.addressList.GEB_GLOBAL_SETTLEMENT, collateralType, wad));
    };
    // ==== Proxy Actions Incentive ====
    GebProxyActions.prototype.exitAndRemoveLiquidity = function (minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.exitAndRemoveLiquidity(this.addressList.GEB_COIN_JOIN, this.addressList.GEB_UNISWAP_INCENTIVE, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.exitMine = function (incentives) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.exitMine(incentives));
    };
    GebProxyActions.prototype.exitRemoveLiquidityRepayDebt = function (safe, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.exitRemoveLiquidityRepayDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe, this.addressList.GEB_UNISWAP_INCENTIVE, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.exitRemoveLiquidityRepayDebtFreeETH = function (safe, ethToFree, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.exitRemoveLiquidityRepayDebtFreeETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, safe, this.addressList.GEB_UNISWAP_INCENTIVE, ethToFree, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.generateDebtAndProvideLiquidityStake = function (ethValue, safe, wad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.generateDebtAndProvideLiquidityStake(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, this.addressList.GEB_UNISWAP_INCENTIVE, safe, wad, minTokenAmounts));
    };
    GebProxyActions.prototype.generateDebtAndProvideLiquidityUniswap = function (ethValue, safe, wad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.generateDebtAndProvideLiquidityUniswap(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, safe, wad, minTokenAmounts));
    };
    GebProxyActions.prototype.getLockedReward = function (campaignId) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.getLockedReward(this.addressList.GEB_UNISWAP_INCENTIVE, campaignId));
    };
    GebProxyActions.prototype.harvestReward = function (campaignId) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.harvestReward(this.addressList.GEB_UNISWAP_INCENTIVE, campaignId));
    };
    GebProxyActions.prototype.lockETHGenerateDebtProvideLiquidityStake = function (ethValue, safe, deltaWad, liquidityWad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.lockETHGenerateDebtProvideLiquidityStake(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, this.addressList.GEB_UNISWAP_INCENTIVE, safe, deltaWad, liquidityWad, minTokenAmounts));
    };
    GebProxyActions.prototype.lockETHGenerateDebtProvideLiquidityUniswap = function (ethValue, safe, deltaWad, liquidityWad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.lockETHGenerateDebtProvideLiquidityUniswap(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, safe, deltaWad, liquidityWad, minTokenAmounts));
    };
    GebProxyActions.prototype.openLockETHGenerateDebtProvideLiquidityStake = function (ethValue, deltaWad, collateralType, liquidityWad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.openLockETHGenerateDebtProvideLiquidityStake(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, this.addressList.GEB_UNISWAP_INCENTIVE, collateralType, deltaWad, liquidityWad, minTokenAmounts));
    };
    GebProxyActions.prototype.openLockETHGenerateDebtProvideLiquidityUniswap = function (ethValue, deltaWad, collateralType, liquidityWad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.openLockETHGenerateDebtProvideLiquidityUniswap(bignumber_1.BigNumber.from(ethValue), this.addressList.SAFE_MANAGER, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, collateralType, deltaWad, liquidityWad, minTokenAmounts));
    };
    GebProxyActions.prototype.provideLiquidityUniswap = function (ethValue, wad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.provideLiquidityUniswap(bignumber_1.BigNumber.from(ethValue), this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, wad, minTokenAmounts));
    };
    GebProxyActions.prototype.removeLiquidityUniswap = function (systemCoin, value, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.removeLiquidityUniswap(this.addressList.UNISWAP_ROUTER, systemCoin, value, minTokenAmounts));
    };
    GebProxyActions.prototype.stakeInMine = function (wad) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.stakeInMine(this.addressList.GEB_UNISWAP_INCENTIVE, wad));
    };
    GebProxyActions.prototype.withdrawAndHarvest = function (value, campaignId) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawAndHarvest(this.addressList.GEB_UNISWAP_INCENTIVE, value, campaignId));
    };
    GebProxyActions.prototype.withdrawAndRemoveLiquidity = function (value, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawAndRemoveLiquidity(this.addressList.GEB_COIN_JOIN, this.addressList.GEB_UNISWAP_INCENTIVE, value, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.withdrawFromMine = function (value) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawFromMine(this.addressList.GEB_UNISWAP_INCENTIVE, value));
    };
    GebProxyActions.prototype.withdrawRemoveLiquidityRepayDebt = function (safe, value, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawRemoveLiquidityRepayDebt(this.addressList.SAFE_MANAGER, this.addressList.GEB_COIN_JOIN, safe, this.addressList.GEB_UNISWAP_INCENTIVE, value, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.withdrawRemoveLiquidityRepayDebtFreeETH = function (safe, valueToWithdraw, ethToFree, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawRemoveLiquidityRepayDebtFreeETH(this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_COIN_JOIN, safe, this.addressList.GEB_UNISWAP_INCENTIVE, valueToWithdraw, ethToFree, this.addressList.UNISWAP_ROUTER, minTokenAmounts));
    };
    GebProxyActions.prototype.getRewards = function (campaignId) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.getRewards(this.addressList.GEB_UNISWAP_INCENTIVE, campaignId));
    };
    GebProxyActions.prototype.provideLiquidityStake = function (ethValue, wad, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.provideLiquidityStake(ethValue, this.addressList.GEB_COIN_JOIN, this.addressList.UNISWAP_ROUTER, this.addressList.GEB_UNISWAP_INCENTIVE, wad, minTokenAmounts));
    };
    GebProxyActions.prototype.withdrawHarvestRemoveLiquidity = function (amount, campaignId, minTokenAmounts) {
        return this.getProxiedTransactionRequest(this.proxyActionIncentive.withdrawHarvestRemoveLiquidity(this.addressList.GEB_UNISWAP_INCENTIVE, this.addressList.UNISWAP_ROUTER, this.addressList.GEB_COIN_JOIN, amount, campaignId, minTokenAmounts));
    };
    // ==== Proxy Actions Leverage ====
    GebProxyActions.prototype.flashDeleverage = function (uniswapV2Pair, callbackProxy, safe) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.flashDeleverage(uniswapV2Pair, this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.ETH, callbackProxy, safe));
    };
    GebProxyActions.prototype.flashDeleverageFreeETH = function (uniswapV2Pair, callbackProxy, safe, amountToFree) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.flashDeleverageFreeETH(uniswapV2Pair, this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.ETH, callbackProxy, safe, amountToFree));
    };
    GebProxyActions.prototype.flashLeverage = function (uniswapV2Pair, callbackProxy, safe, leverage) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.flashLeverage(uniswapV2Pair, this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.ETH, callbackProxy, safe, leverage));
    };
    GebProxyActions.prototype.lockETHLeverage = function (ethValue, uniswapV2Pair, callbackProxy, safe, leverage) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.lockETHLeverage(bignumber_1.BigNumber.from(ethValue), uniswapV2Pair, this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.ETH, callbackProxy, safe, leverage));
    };
    GebProxyActions.prototype.openLockETHLeverage = function (ethValue, uniswapV2Pair, callbackProxy, leverage) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.openLockETHLeverage(bignumber_1.BigNumber.from(ethValue), uniswapV2Pair, this.addressList.SAFE_MANAGER, this.addressList.GEB_JOIN_ETH_A, this.addressList.GEB_TAX_COLLECTOR, this.addressList.GEB_COIN_JOIN, this.addressList.ETH, callbackProxy, leverage));
    };
    GebProxyActions.prototype.uniswapV2Call = function (_sender, _amount0, _amount1, _data) {
        return this.getProxiedTransactionRequest(this.proxyActionLeverage.uniswapV2Call(_sender, _amount0, _amount1, _data));
    };
    return GebProxyActions;
}());
exports.GebProxyActions = GebProxyActions;
//# sourceMappingURL=proxy-action.js.map